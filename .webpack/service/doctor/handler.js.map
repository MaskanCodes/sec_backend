{"version":3,"file":"doctor/handler.js","mappings":"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","sources":["webpack://sec-backend/./configs/common.js","webpack://sec-backend/./configs/sec-types.js","webpack://sec-backend/./configs/utility.js","webpack://sec-backend/./database/helper.js","webpack://sec-backend/./database/index.js","webpack://sec-backend/./database/tables.js","webpack://sec-backend/./doctor/user-adapter.js","webpack://sec-backend/./helpers/aws-helper.js","webpack://sec-backend/./helpers/image-helper.js","webpack://sec-backend/./helpers/mail-helper.js","webpack://sec-backend/./helpers/models/user-model.js","webpack://sec-backend/external commonjs \"@aws-sdk/client-ses\"","webpack://sec-backend/external commonjs \"@aws-sdk/client-sns\"","webpack://sec-backend/external commonjs \"@babel/runtime/helpers/defineProperty\"","webpack://sec-backend/external commonjs \"canvas\"","webpack://sec-backend/external commonjs \"jsonwebtoken\"","webpack://sec-backend/external commonjs \"serverless-mysql\"","webpack://sec-backend/external node-commonjs \"crypto\"","webpack://sec-backend/external node-commonjs \"fs\"","webpack://sec-backend/external node-commonjs \"https\"","webpack://sec-backend/webpack/bootstrap","webpack://sec-backend/webpack/runtime/compat get default export","webpack://sec-backend/webpack/runtime/define property getters","webpack://sec-backend/webpack/runtime/hasOwnProperty shorthand","webpack://sec-backend/webpack/runtime/make namespace object","webpack://sec-backend/./doctor/handler.js"],"sourcesContent":["\"strict mode\";\n\nexport const randomNumber = {\n    length: 6,\n    containers: \"7028361495\",\n    minutes: 20,\n};\n\nexport const OTP = {\n    length: 6,\n    containers: \"D01U2JKQZMNO56RST789LAB4CFGE3HIPVWXY\",\n};\n\nexport const thumbnail = {\n    width: 250,\n    height: 250,\n    imgFormat: \"png\",\n};\n\nexport const SMSmessages = {\n    activation_code_message: \"Your Shareecare verification Code is {0}. #ShareECare\",\n};\n\nexport const aws = {\n    s3: {\n        params: {\n            Bucket: \"{0}.shareecare.documents\",\n            Domain: \"{0}.documents.shareecare.com\",\n        },\n    },\n    settings: {\n        root_path: \"user_documents/{0}\", // {0} UserId\n        feedback_path: \"user_feedbacks/{0}\", // {0} UserId\n        image_path: \"/images\",\n        file_path: \"/files\",\n    },\n};\n\nexport const app = {\n    jwtSecret: process.env.JWT_SECRET,\n};\n\nexport const envMapping = {\n    development: \"dev\",\n    production: \"prod\",\n    test: \"test\",\n};\n\nexport const totalFilesSize = 20480;\n","export const result = {\n    SUCCESS: 0, // Success for all response if successful\n\n    /** * 1 to 50 User related error codes ** */\n    EMAIL_EXISTS: 1, // Email already exists\n    MOBILE_EXISTS: 2, // Mobile already exists\n    USER_NOT_EXISTS: 3, // User not exists\n    USER_EXISTS: 4, // User exists\n    USER_PASSWORD_INCORRECT: 5, // Password is wrong\n    REGISTRATION_NOT_CONFIRMED: 6, // user Email is not conformed\n    ACTIVATION_CODE_EXPIRED: 7,\n    ACTIVATION_CODE_MISMATCH: 8,\n    ALREADY_ACTIVE_MEMBER: 9,\n    VALUE_NULL: 10,\n\n    /** Document related service ** */\n    DOCUMENT_N0T_EXISTS: 15,\n\n    /** Firebase push notification service ** */\n    FIREBASE_NOTIFICATION_ERROR: 20,\n\n    /** * 351 t0 400 Google Api related error codes ** */\n    ZERO_RESULTS: 351,\n    OVER_QUERY_LIMIT: 352,\n    REQUEST_DENIED: 353,\n    INVALID_REQUEST: 354,\n    UNKNOWN_ERROR: 355,\n\n    /** * Response Types ** */\n    OK: 200,\n    BAD: 400,\n    DENIED: 401,\n    FORBIDDEN: 403,\n    SERVER_ERROR: 500,\n};\n\nexport const notificationType = {\n    BROADCAST: 1,\n    UNICAST: 2,\n};\n\nexport const userRole = {\n    SUPER_ADMIN: 1,\n    ADMIN: 2,\n    DOCTOR: 3,\n    HCF: 4,\n    PATIENT: 5,\n};\n\nexport const userStatus = {\n    ACTIVE: 0,\n    IN_ACTIVE: 1,\n    DELETED: 2,\n    TRUNK: 3,\n};\n\nexport const isPublished = {\n    PUBLISHED: 0,\n    UNPUBLISHED: 1,\n};\n\nexport const isCompleted = {\n    COMPLETED: 0,\n    NOT_COMPLETED: 1,\n};\n\nexport const mailType = {\n    welcome: 0,\n    resetPassword: 1,\n    error: 999,\n};\n\nexport const notificationStatus = {\n    unRead: 1,\n    read: 2,\n};\n\nexport const isSent = {\n    sent: 0,\n    notSent: 1,\n};\n\nexport const registration_type = {\n    EMAIL: 1,\n    SSO: 2,\n};\n\nexport const registration_from = {\n    WEB: 1,\n    APP: 2,\n};\n\nexport const expirationTime = {\n    normal: {\n        hours: 8,\n        minutes: 2,\n        seconds: 120,\n        unit: \"h\",\n    },\n    remember: {\n        hours: 12,\n        minutes: 12 * 60 * 60,\n        seconds: 60,\n        unit: \"h\",\n    },\n};\n","#!/usr/bin/env node\n/* eslint-disable no-useless-escape */\n\n\"strict mode\";\n\nimport jwt from \"jsonwebtoken\";\nimport https from \"https\";\nimport fs from \"fs\";\n\nimport crypto from \"crypto\";\nimport { expirationTime } from \"./sec-types\";\nimport { randomNumber, OTP, app } from \"./common\";\n\nconst cryptoAlgorithm = \"aes-256-ctr\"; // Do not alter\nconst cryptoPassword = Buffer.from(process.env.CRYPTO_PASSWORD, \"base64\"); // Do not alter\nconst IV_LENGTH = 16;\n\nconst randomStringLength = randomNumber.length;\nconst chars = randomNumber.containers;\n\nconst OTPlength = OTP.length;\nconst OTPchars = OTP.containers;\n\n/**\n * Generates a random number of specified length using the specified characters\n * @returns {string} - The generated random number\n */\nexport const getRandomNumber = () => {\n    let result = \"\";\n    for (let i = randomStringLength; i > 0; --i)\n        result += chars[Math.round(Math.random() * (chars.length - 1))];\n    return result;\n};\n\n/**\n * Generates a one-time password (OTP) of specified length using the specified characters\n * @returns {string} - The generated OTP\n */\nexport const getOTP = () => {\n    let result = \"\";\n    for (let i = OTPlength; i > 0; --i)\n        result += OTPchars[Math.round(Math.random() * (OTPchars.length - 1))];\n    return result;\n};\n\n/**\n * Encrypts a password using AES-256-CTR encryption\n * @param {string} password - The password to be encrypted\n * @returns {string} - The encrypted password, prefixed by the initialization vector used in encryption\n */\nexport const hashString = (password) => {\n    const iv = crypto.randomBytes(IV_LENGTH);\n    const cipher = crypto.createCipheriv(cryptoAlgorithm, Buffer.from(cryptoPassword), iv);\n    const encrypted = cipher.update(password);\n    const finalBuffer = Buffer.concat([encrypted, cipher.final()]);\n    return `${iv.toString(\"hex\")}:${finalBuffer.toString(\"hex\")}`;\n};\n\n/**\n * Decrypts an encrypted password using AES-256-CTR encryption\n * @param {string} password - The encrypted password, prefixed by the initialization vector used in encryption\n * @returns {string} - The decrypted password\n */\nexport const descryptHashString = (password) => {\n    const textParts = password.split(\":\");\n    const iv = Buffer.from(textParts.shift(), \"hex\");\n    const encryptedText = Buffer.from(textParts.join(\":\"), \"hex\");\n    const decipher = crypto.createDecipheriv(cryptoAlgorithm, Buffer.from(cryptoPassword), iv);\n    let decrypted = decipher.update(encryptedText);\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\n    return decrypted.toString();\n};\n\n/**\n * Generates a JSON web token (JWT) for the specified user ID\n * @param {string} user_id - The user ID for which the JWT is to be generated\n * @param {boolean} remember_me - Whether or not to generate a long-lived JWT for \"remember me\" functionality\n * @returns {Promise<string>} - A Promise that resolves to the generated JWT\n */\nexport const generateJWT = async (user_id, remember_me) => {\n    return await jwt.sign({ user_id }, app.jwtSecret, {\n        expiresIn: remember_me\n            ? `${expirationTime.remember.hours}${expirationTime.normal.unit}`\n            : `${expirationTime.normal.hours}${expirationTime.normal.unit}`,\n    });\n};\n\n/**\n * Decodes a JWT and returns the user ID it contains\n * @param {string} token - The JWT to be decoded\n * @returns {Promise<string>} - A Promise that resolves to the user ID contained in the JWT\n */\nexport const decodeJWT = async (token) => {\n    try {\n        const decoded = await jwt.verify(token, app.jwtSecret);\n        return decoded.user_id;\n    } catch (err) {\n        throw err;\n    }\n};\n\n/**\n * Adds the specified number of hours to a given date\n * @param {Date} date - The date to which hours are to be added\n * @param {number} hours - The number of hours to add to the date\n * @returns {Date} - The resulting date\n */\nexport const addHoursToDate = (date, hours) => {\n    return new Date(new Date(date).setHours(date.getHours() + hours));\n};\n\n/**\n * Adds the specified number of minutes to a given date\n * @param {Date} date - The date to which minutes are to be added\n * @param {number} minutes - The number of minutes to add to the date\n * @returns {Date} - The resulting date\n */\nexport const addMinutesToDate = (date, minutes) => {\n    return new Date(new Date(date).setMinutes(date.getMinutes() + minutes));\n};\n\n/**\n * Gets the filename and extension from a given path/filename string\n * @param {string} pathfilename - The path/filename string from which to extract the filename and extension\n * @returns {string[]} - An array containing the filename and extension, respectively\n */\nexport const getFilenameAndExtension = (pathfilename) => {\n    const filenameextension = pathfilename.replace(/^.*[\\\\\\/]/, \"\");\n    const filename = filenameextension.substring(0, filenameextension.lastIndexOf(\".\"));\n    const ext = filenameextension.split(\".\").pop();\n\n    return [filename, ext];\n};\n\n/**\n * Groups an array of objects by the specified key\n * @param {Object[]} arr - The array of objects to be grouped\n * @param {string} key - The key by which to group the objects\n * @returns {Object} - An object containing the groups of objects, with keys corresponding to the grouping key values\n */\nexport const groupBy = (arr, key) => {\n    const initialValue = {};\n    return arr.reduce((acc, cval) => {\n        const myAttribute = cval[key];\n        acc[myAttribute] = [...(acc[myAttribute] || []), cval];\n        return acc;\n    }, initialValue);\n};\n\n/**\n * Creates a success response object for use in AWS Lambda functions\n * @param {Object|string} body - The body of the response object; can be an object or a string\n * @param {number} statusCode - The HTTP status code of the response\n * @returns {Object} - The response object, including headers necessary for CORS and content type\n */\nexport const createSuccessResponse = (body, statusCode) => {\n    const bodyString = typeof body === \"object\" ? JSON.stringify(body) : body;\n    return {\n        statusCode,\n        body: bodyString,\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Content-Type\": \"application/json \",\n        },\n    };\n};\n\n/**\n * Creates an error response object with a given message and status code\n *\n * @param {string} message - The error message\n * @param {number} statusCode - The HTTP status code\n * @returns {Object} - The error response object\n */\nexport const createErrorResponse = (body, statusCode) => {\n    const bodyString = typeof body === \"object\" ? JSON.stringify(body) : body;\n    return {\n        statusCode,\n        body: bodyString || \"Internal Server Error\",\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Content-Type\": \"application/json \",\n        },\n    };\n};\n\n/**\n * Converts a readable stream to a string\n *\n * @param {stream.Readable} stream - The stream to convert\n * @returns {Promise<string>} - A promise that resolves to the stream content as a string\n */\nexport const streamToString = (stream) =>\n    new Promise((resolve, reject) => {\n        const chunks = [];\n        stream.on(\"data\", (chunk) => chunks.push(chunk));\n        stream.on(\"error\", reject);\n        stream.on(\"end\", () => resolve(Buffer.concat(chunks).toString(\"utf8\")));\n    });\n\n/**\n * Parses cookies from a given request object\n *\n * @param {Object} request - The request object\n * @returns {Object} - An object with the parsed cookies\n */\nexport const parseCookies = (request) => {\n    const list = {};\n    try {\n        const cookieHeader =\n            request.queryStringParameters && request.queryStringParameters.cookie\n                ? request.queryStringParameters.cookie.split(\";\")\n                : request.cookies\n                ? request.cookies\n                : request.headers.Cookie\n                ? request.headers.Cookie.split(\";\")\n                : request.headers.cookie\n                ? request.headers.cookie.split(\";\")\n                : request.headers.authorization\n                ? request.headers.authorization.split(\";\")\n                : request.headers.Authorization.split(\";\");\n\n        if (!cookieHeader) return list;\n\n        cookieHeader.forEach((cookie) => {\n            const [name, ...rest] = cookie.split(`=`);\n            const trimedName = name?.trim();\n            if (!trimedName) return;\n            const value = rest.join(`=`).trim();\n            if (!value) return;\n            list[trimedName] = decodeURIComponent(value);\n        });\n    } catch (err) {\n        console.log(\"Some error occured in parsing cookies\", err);\n    }\n\n    return list;\n};\n\n/**\n * Formats a date string to the format 'MM/DD/YYYY'\n *\n * @param {string} date - The date string to format\n * @returns {string} - The formatted date string\n */\nexport const formatDate = (date) => {\n    const newDate = new Date(date);\n    return `${newDate.getMonth() > 8 ? newDate.getMonth() + 1 : `0${newDate.getMonth() + 1}`}/${\n        newDate.getDate() > 9 ? newDate.getDate() : `0${newDate.getDate()}`\n    }/${newDate.getFullYear()}`;\n};\n\n/**\n * Creates a directory at the given path\n *\n * @param {string} path - The path of the directory to create\n * @returns {Promise<void>} - A promise that resolves when the directory is created\n */\nexport const createDirectory = async (path) => {\n    try {\n        if (!fs.existsSync(path)) {\n            fs.mkdirSync(path);\n        }\n    } catch (err) {\n        console.log(\"Error occured in creating directory\", err);\n    }\n};\n\n/**\n * Downloads a file from the given URL and saves it to the given file path\n *\n * @param {string} url - The URL of the file to download\n * @param {string} filePath - The path of the file to save to\n * @returns {Promise<void>} - A promise that resolves when the file is downloaded\n */\nexport const downloadFile = async (url, filePath) => {\n    return await new Promise((resolve, reject) => {\n        console.log(\"Downloading file from \", url, \"to\", filePath);\n        https\n            .get(url, (response) => {\n                const code = response.statusCode ? response.statusCode : 0;\n\n                if (code >= 400) {\n                    return reject(new Error(response.statusMessage));\n                }\n\n                // handle redirects\n                if (code > 300 && code < 400 && !!response.headers.location) {\n                    return downloadFile(response.headers.location, filePath);\n                }\n\n                // save the file to disk\n                const fileWriter = fs.createWriteStream(filePath).on(\"finish\", () => {\n                    console.log(\"Download Completed!\");\n                    resolve({});\n                });\n\n                response.pipe(fileWriter);\n                return \"File written\";\n            })\n            .on(\"error\", (error) => {\n                console.log(\"Error occured in downloading file\", error);\n                reject(error);\n            });\n    });\n};\n\n/**\n * Returns the top-level domain of a given URL without any subdomains.\n * @param {string} domain - The full domain to extract the top-level domain from.\n * @returns {string} - The top-level domain of the given domain without any subdomains.\n * @throws {Error} - Throws an error if the domain cannot be processed.\n */\nexport const getDomainWithoutSubdomain = (domain) => {\n    try {\n        const domainCharacters = domain.split(\"\").reverse();\n        let domainReversed = \"\";\n        let dotCount = 0;\n\n        do {\n            if (domainCharacters[0] === \".\") {\n                dotCount++;\n                if (dotCount === 2) break;\n            }\n            domainReversed += domainCharacters[0];\n            domainCharacters.splice(0, 1);\n        } while (dotCount < 2 && domainCharacters.length > 0);\n\n        return domainReversed.split(\"\").reverse().join(\"\");\n    } catch (err) {\n        console.log(\"Error occured while getting domain without sub domain\", err);\n        throw err;\n    }\n};\n\n/**\n * Returns the size of a file in bytes given the file's path.\n * @param {string} filename - The path to the file to get the size of.\n * @returns {number} - The size of the file in bytes.\n */\nexport const getFilesizeInBytes = (filename) => {\n    const stats = fs.statSync(filename);\n    return stats.size;\n};\n\n/**\n * Returns the start and end dates of a specified period based on a given date.\n * @param {string} periodType - The type of period to get (\"day\", \"month\", \"months\", or \"year\").\n * @param {string[]} date - The date to calculate the period start and end from.\n * @param {number} value - The number of months to subtract when the periodType is \"months\".\n * @returns {Date[]} - An array containing the start and end dates of the specified period.\n * @throws {Error} - Throws an error if the periodType is not one of the specified types.\n */\nexport const getPeriodStartEnd = (periodType, date, value) => {\n    if (periodType === \"date_range\") return [new Date(date[0]), new Date(date[1])];\n\n    const startDate = new Date(date[0]);\n    const endDate = new Date(date[0]);\n\n    if (periodType === \"day\") {\n        startDate.setHours(0, 0, 0, 0);\n        endDate.setHours(23, 59, 59, 999);\n    } else if (periodType === \"month\") {\n        startDate.setDate(1);\n        endDate.setMonth(endDate.getMonth() + 1);\n        endDate.setDate(0);\n        endDate.setHours(23, 59, 59, 999);\n    } else if (periodType === \"months\") {\n        startDate.setMonth(startDate.getMonth() - value);\n        startDate.setDate(0);\n        endDate.setMonth(endDate.getMonth() + 1);\n        endDate.setDate(0);\n        endDate.setHours(23, 59, 59, 999);\n    } else if (periodType === \"year\") {\n        startDate.setFullYear(startDate.getFullYear() - 1);\n        startDate.setMonth(startDate.getMonth());\n        endDate.setMonth(startDate.getMonth());\n        endDate.setHours(23, 59, 59, 999);\n    } else {\n        throw new Error(stringifyError({ message: \"Invalid period type\", code: 400 }));\n    }\n\n    return [startDate, endDate];\n};\n\nexport const parseEventBody = (parseBody) => {\n    if (parseBody) {\n        return JSON.parse(parseBody);\n    }\n    return parseBody;\n};\n\nexport const stringifyError = (errObj) => {\n    try {\n        return JSON.stringify(errObj);\n    } catch (err) {\n        return errObj;\n    }\n};\n\nexport const parseError = (errObj) => {\n    try {\n        return JSON.parse(errObj);\n    } catch (err) {\n        return errObj;\n    }\n};\n\nexport const generateError = (message, code) => {\n    throw new Error(stringifyError({ message, code }));\n};\n","/* eslint-disable prettier/prettier */\nimport { initConnection } from \".\";\n\nasync function queryDatabase(query, params) {\n    const conn = await initConnection();\n    try {\n        if (params) {\n            const rows = await conn.query(query, params);\n            return rows;\n        }\n        const rows = await conn.query(query);\n        return rows;\n    } catch (err) {\n        console.error(err);\n        throw err;\n    } finally {\n        if (conn) conn.end();\n    }\n}\n\nexport async function createRecord(table, records, getResults, column) {\n    const columns = Object.keys(records[0]).toString();\n    const values = records.map((record) => Object.values(record));\n    const query = `INSERT INTO ${table} (${columns}) VALUES ?`;\n    const insertResult = await queryDatabase(query, [values]);\n    const { insertId } = insertResult;\n\n    if (getResults) {\n        const selectQuery = `SELECT * FROM ${table} WHERE ${column} = ?`;\n        const selectResult = await queryDatabase(selectQuery, [insertId]);\n        return selectResult[0];\n    }\n    return insertId;\n}\n\nexport async function updateRecord(table, record, whereColumns, joinParams) {\n    const columns = Object.keys(record)\n        .map((ele) => `${ele} = ?`)\n        .toString();\n    const whereClause = Object.keys(whereColumns)\n        .map((key) => `${key} = ?`)\n        .join(` ${joinParams} `);\n    const params = [...Object.values(record), ...Object.values(whereColumns)];\n    const query = `UPDATE ${table} SET ${columns} WHERE ${whereClause}`;\n    return await queryDatabase(query, params);\n}\n\nexport async function getAllRecords(table) {\n    const query = `SELECT * FROM ${table}`;\n    return await queryDatabase(query);\n}\n\nexport async function getRecordByParams(\n    table,\n    whereColumns,\n    joinParams,\n    selectParams = \"*\",\n    order = \"desc\",\n    orderBy = \"suid\",\n) {\n    const whereClause = Object.keys(whereColumns)\n        .map((key) => `${key} = ?`)\n        .join(` ${joinParams} `);\n    const query = `SELECT ${selectParams} FROM ${table} WHERE ${whereClause} order by ${orderBy} ${order}`;\n    return await queryDatabase(query, [...Object.values(whereColumns)]);\n}\n\nexport async function deleteRecord(table, whereColumns) {\n    const whereClause = Object.keys(whereColumns)\n        .map((key) => `${key} = ?`)\n        .join(\" AND \");\n    const query = `DELETE FROM ${table} WHERE ${whereClause}`;\n    return await queryDatabase(query, [...Object.values(whereColumns)]);\n}\n\n// export async function runRawQuery(table, alias1, alias2) {\n//     const joinCondition = `${alias1.column1} = ${alias2.column2}`;\n//    const query = `SELECT * FROM ${table}${alias1} JOIN ${table}${alias2} ON ${joinCondition} `;\nexport async function runRawQuery(table1, table2, table3, column1, column2, column3, column4) {\n    const query = `SELECT * FROM ${table1} JOIN ${table2} ON ${table1}.${column1} = ${table2}.${column2} JOIN ${table3} ON  ${table2}.${column3} =  ${table3}.${column4} `;\n    return await queryDatabase(query);\n}\n\nexport async function completeDoctorsDetails(table) {\n    const query = `SELECT * FROM ${table}`;\n    return await queryDatabase(query);\n}\n\nexport async function completeDoctorsDetailsId(table, column, id) {\n    // const query = `SELECT * FROM ${table} WHERE  ${table}.doctor_details_id = ?;`;\n    const query = ` SELECT *\n    FROM sec_users\n    JOIN sec_doctors_details ON sec_users.suid = sec_doctors_details.doctor_id\n    JOIN sec_departments ON sec_doctors_details.speciality_id = sec_departments.department_id\n    WHERE sec_users.role_id = '3' AND sec_doctors_details.doctor_details_id = ?; `;\n    return await queryDatabase(query, [id]);\n}\n\nexport async function appointmentQuery(table) {\n    const query = `SELECT * FROM ${table}`;\n    return await queryDatabase(query);\n}\n\n\n\nexport async function completeappointmentQuery(table) {\n    const query = `SELECT * FROM ${table}`;\n    return await queryDatabase(query);\n}\n\n\n\n\n\n// -----------------------------------------  Doctor API -------------------------------------------------------\n\nexport async function DocDashboardAppQuery(table, doc_id) {\n    const query = `SELECT * FROM ${table} WHERE ${table}.doctor_id = ${doc_id}`;\n    return await queryDatabase(query);\n}\n\n\nexport async function DocDashoardAppstatusQuery(table, app_status, app_id) { \n    const query = `SELECT * FROM ${table} WHERE ${table}.status = '${app_status}' AND ${table}.doctor_id = ${app_id}`;\n    return await queryDatabase(query);\n}\n\nexport async function DocNotificationQuery(table, app_id) { \n    const query = `SELECT * FROM ${table} WHERE ${table}.doctor_id = ${app_id}`;\n    return await queryDatabase(query);\n}\n\n\nexport async function docAppointmentdetailsQuerybyId(table, app_id) {\n    const query = `SELECT * FROM ${table} WHERE ${table}.doctor_id = ${app_id}`;\n    return await queryDatabase(query);\n}\n\nexport async function docAppointmentQuerybystatusId(table, app_status, app_id) { \n    const query = `SELECT * FROM ${table} WHERE ${table}.status = '${app_status}' AND ${table}.doctor_id = ${app_id}`;\n    return await queryDatabase(query);\n}\n\n\nexport async function getDocAppStatusRecord(\n    table,\n    whereColumns,\n    joinParams,\n    selectParams = \"*\",\n    order = \"desc\",\n    orderBy = \"appointment_id\",\n) {\n    const whereClause = Object.keys(whereColumns)\n        .map((key) => `${key} = ?`)\n        .join(` ${joinParams} `);\n    const query = `SELECT ${selectParams} FROM ${table} WHERE ${whereClause} order by ${orderBy} ${order}`;\n    return await queryDatabase(query, [...Object.values(whereColumns)]);\n}\n\nexport async function getDocListingRecord(\n    table,\n    whereColumns,\n    joinParams,\n    selectParams = \"*\",\n    order = \"desc\",\n    orderBy = \"doctor_id\",\n) {\n    const whereClause = Object.keys(whereColumns)\n        .map((key) => `${key} = ?`)\n        .join(` ${joinParams} `);\n    const query = `SELECT ${selectParams} FROM ${table} WHERE ${whereClause} order by ${orderBy} ${order}`;\n    return await queryDatabase(query, [...Object.values(whereColumns)]);\n}\n\n\n\nexport async function getDocAppRecord(\n    table,\n    whereColumns,\n    joinParams,\n    selectParams = \"*\",\n    order = \"desc\",\n    orderBy = \"doctor_id\",\n) {\n    const whereClause = Object.keys(whereColumns)\n        .map((key) => `${key} = ?`)\n        .join(` ${joinParams} `);\n    const query = `SELECT ${selectParams} FROM ${table} WHERE ${whereClause} order by ${orderBy} ${order}`;\n    return await queryDatabase(query, [...Object.values(whereColumns)]);\n}\n\nexport async function doctordetailsQueryId(table1, table2, table3, column1, column2, column3, column4, column5, id) {\n    // const query = `SELECT * FROM  ${table2} WHERE   ${table2}.doctor_id =  ${id} ;`;\n    const query = ` SELECT *  FROM ${table1} JOIN ${table2} ON ${table1}.${column1} = ${table2}.${column2} JOIN ${table3} ON  ${table2}.${column3} =  ${table3}.${column4}\n    WHERE ${table1}.role_id = '3' AND ${table2}.doctor_id = ${id} `;\n  \n    return await queryDatabase(query, [id]);\n}\n\n\nexport async function getDocDetailRecord(\n    table,\n    whereColumns,\n    joinParams,\n    selectParams = \"*\",\n    order = \"desc\",\n    orderBy = \"doctor_id\",\n) {\n    const whereClause = Object.keys(whereColumns)\n        .map((key) => `${key} = ?`)\n        .join(` ${joinParams} `);\n    const query = `SELECT ${selectParams} FROM ${table} WHERE ${whereClause} order by ${orderBy} ${order}`;\n    return await queryDatabase(query, [...Object.values(whereColumns)]);\n}\n\n\n\n// export async function getDocListingRecord(\n//     table,\n//     whereColumns,\n//     joinParams,\n//     selectParams = \"*\",\n//     order = \"desc\",\n//     orderBy = \"doctor_id\",\n// ) {\n//     const whereClause = Object.keys(whereColumns)\n//         .map((key) => `${key} = ?`)\n//         .join(` ${joinParams} `);\n//     const query = `SELECT ${selectParams} FROM ${table} WHERE ${whereClause} order by ${orderBy} ${order}`;\n//     return await queryDatabase(query, [...Object.values(whereColumns)]);\n// }\n\n\nexport async function DocAppointmentHistory(table, app_id) {\n    // const query = `SELECT * FROM ${table} WHERE ${table}.status = ${app_status}`;\n    const query = `SELECT * FROM ${table} WHERE ${table}.doctor_id = ${app_id}`;\n    return await queryDatabase(query);\n}\n\n\nexport async function DoctransactionQuery(table, doc_id) {\n    // const query = `SELECT * FROM ${table} WHERE ${table}.status = ${app_status}`;\n    const query = `SELECT * FROM ${table} WHERE ${table}.user_id = ${doc_id}`;\n    return await queryDatabase(query);\n}\n// export async function getDocListingRecord(\n//     table,\n//     whereColumns,\n//     joinParams,\n//     selectParams = \"*\",\n//     order = \"desc\",\n//     orderBy = \"doctor_id\",\n// ) {\n//     const whereClause = Object.keys(whereColumns)\n//         .map((key) => `${key} = ?`)\n//         .join(` ${joinParams} `);\n//     const query = `SELECT ${selectParams} FROM ${table} WHERE ${whereClause} order by ${orderBy} ${order}`;\n//     return await queryDatabase(query, [...Object.values(whereColumns)]);\n// }\n\n\n// -----------------------------------------------------------Patient -------------------------------------------\n// Patient Dashboard All Doctors details\nexport async function dashboarddocdetailsQuery(table1, table2, table3, column1, column2, column3, column4) {\n    const query = `SELECT * FROM ${table1} JOIN ${table2} ON ${table1}.${column1} = ${table2}.${column2} JOIN ${table3} ON  ${table2}.${column3} =  ${table3}.${column4} \n    WHERE ${table1}.role_id = '3'`;\n    return await queryDatabase(query);\n}\n\n// Patient Dashboard Single Doctors details \nexport async function dashboarddocdetailsQueryId(table1, table2, table3, column1, column2, column3, column4, doc_id) {\n    const query = `SELECT * FROM ${table1} JOIN ${table2} ON ${table1}.${column1} = ${table2}.${column2} JOIN ${table3} ON  ${table2}.${column3} =  ${table3}.${column4} \n    WHERE ${table1}.role_id = '3' AND ${table2}.doctor_id = ${doc_id} `;\n    return await queryDatabase(query);\n}\n\n// Patient Dashboard All HCF details\nexport async function dashboardhcfdetailsQuery(table1, table2, column1, column2) {\n    const query = `SELECT * FROM ${table1} JOIN ${table2} ON ${table1}.${column1} = ${table2}.${column2}  \n    WHERE ${table1}.role_id = '4'`;\n    return await queryDatabase(query);\n}\n\n// Patient Dashboard Single HCF details \nexport async function dashboardhcfdetailsQueryId(table1, table2, column1, column2, hcf_id) {\n    const query = `SELECT * FROM ${table1} JOIN ${table2} ON ${table1}.${column1} = ${table2}.${column2}  \n    WHERE ${table1}.role_id = '4' AND ${table2}.hcf_id = ${hcf_id} `;\n    return await queryDatabase(query);\n}\n\n\nexport async function patientActivityQuery(table, app_id) {\n    // const query = `SELECT * FROM ${table} WHERE ${table}.status = ${app_status}`;\n    const query = `SELECT * FROM ${table} WHERE ${table}.patient_id = ${app_id}`;\n    return await queryDatabase(query);\n}\n\n\n\nexport async function patientNotificationQuery(table, app_id) {\n    // const query = `SELECT * FROM ${table} WHERE ${table}.status = ${app_status}`;\n    const query = `SELECT * FROM ${table} WHERE ${table}.patient_id = ${app_id}`;\n    return await queryDatabase(query);\n}\n\nexport async function patientappQuerybystatusid(table, app_status, app_id) {\n    // const query = `SELECT * FROM ${table} WHERE ${table}.status = ${app_status}`;\n    const query = `SELECT * FROM ${table} WHERE ${table}.status = '${app_status}' AND ${table}.patient_id = ${app_id}`;\n    return await queryDatabase(query);\n}\n\nexport async function appointmentHistoryQuery(table, app_id) {\n    // const query = `SELECT * FROM ${table} WHERE ${table}.status = ${app_status}`;\n    const query = `SELECT * FROM ${table} WHERE ${table}.patient_id = ${app_id}`;\n    return await queryDatabase(query);\n}\n\nexport async function patienttransactionQuery(table, user_id) {\n    // const query = `SELECT * FROM ${table} WHERE ${table}.status = ${app_status}`;\n    const query = `SELECT * FROM ${table} WHERE ${table}.user_id = ${user_id}`;\n    return await queryDatabase(query);\n}\nexport async function patientPlanQuery(table, pat_id) {\n    // const query = `SELECT * FROM ${table} WHERE ${table}.status = ${app_status}`;\n    const query = `SELECT * FROM ${table} WHERE ${table}.patient_id = ${pat_id}`;\n    return await queryDatabase(query);\n}\n","import mysql from \"serverless-mysql\";\n\nlet pool;\n\nexport const initConnection = async () => {\n    try {\n        if (!pool) {\n            console.log(\"connecting to database............\");\n            pool = mysql({\n                config: {\n                    host: process.env.DB_HOST,\n                    user: process.env.DB_USER,\n                    password: process.env.DB_PASSWORD,\n                    database: process.env.DB_DATABASE,\n                    waitForConnections: true,\n                    connectionLimit: process.env.CONNECTION_LIMIT, // maximum number of connections in the pool\n                    queueLimit: process.env.QUEUE_LIMIT, // maximum number of requests in the queue\n                },\n            });\n            console.log(\"connected to database\");\n            return pool;\n        }\n\n        console.log(\"using cached connection............\");\n        return pool;\n    } catch (err) {\n        console.log(\"Error occurred in database connection\", err);\n        throw err;\n    }\n};\n","export const tableNames = {\n    SEC_COUNTRIES: \"sec_countries\",\n    SEC_STATES: \"sec_states\",\n    SEC_CITIES: \"sec_cities\",\n    SEC_ROLES: \"sec_roles\",\n    SEC_DEPARTMENTS: \"sec_departments\",\n    SEC_USERS: \"sec_users\",\n    SEC_USER_CODES: \"sec_user_codes\",\n    SEC_PATIENT_PLANS: \"sec_patient_plans\",\n    SEC_DOCTORS_DETAILS: \"sec_doctors_details\",\n    VW_SEC_COMPLETE_DOCTOR_DETAILS: \"completedoctordetails\",\n    SEC_APPOINTMENTS: \"sec_appointments\",\n    SEC_TRANSACTIONS: \"sec_transactions\",\n    SEC_DOCTOR_LISTING: \"sec_doc_listing_details\",\n    SEC_HCF_DETAILS:\"sec_hcf_details\",\n\n};\n","/* eslint-disable prettier/prettier */\nimport { createRecord, getRecordByParams, runRawQuery, updateRecord, getDocDetailRecord, getDocListingRecord,\n    getDocAppRecord, getDocAppStatusRecord} from \"../database/helper\";\nimport { tableNames } from \"../database/tables\";\nimport {\n    hashString,\n    generateJWT,\n    addHoursToDate,\n    descryptHashString,\n    generateError,\n    getOTP,\n    getRandomNumber,\n    createSuccessResponse,\n} from \"../configs/utility\";\nimport { expirationTime, userStatus, userRole } from \"../configs/sec-types\";\nimport { sendActivationCode } from \"../helpers/mail-helper\";\nimport { generateDummyProfileImg } from \"../helpers/image-helper\";\nimport { sendOTPToUser } from \"../helpers/aws-helper\";\nimport { randomNumber } from \"../configs/common\";\n\n\nexport const _updateDoctorDetails = async (data) => {\n    const records = { ...data };\n    // delete records.email;\n\n    const dbUser = await getDocDetailRecord(\n        tableNames.SEC_DOCTORS_DETAILS,\n        { doctor_id: data.doctor_id },\n        \"\",\n        \"doctor_id\",\n    );\n\n    if (dbUser.length) {\n        // if (dbUser[0].is_active === userStatus.ACTIVE) {\n            if (\n                dbUser[0].role_id === userRole.DOCTOR &&\n                dbUser[0].is_approved === userStatus.IN_ACTIVE\n            )\n                return generateError(\"ADMIN_APPROVAL_REQUIRED\", 202);\n\n            const selectParams =\n                \"doctor_id, qualification , degree , state_reg_date ,  country_reg_date, job, hospital_org , start_date, lic_title, lic_certificate_no, lic_issuedby, lic_date, lic_description, award_title, award_issuedby, award_date, award_description, qualified_year, reg_date, speciality_id, state_med_council_id, state_reg_number, country_reg_number, university_name\";\n\n            const whereClause = {\n                // email: dbUser[0].email,\n                doctor_id: dbUser[0].doctor_id,\n            };\n\n            // records.can_login = 0;\n\n            await updateRecord(tableNames.SEC_DOCTORS_DETAILS, records, whereClause, \"AND\");\n\n            // await _insertAccessToken(dbUser[0], false);\n\n            const user = await getDocDetailRecord(\n                tableNames.SEC_DOCTORS_DETAILS,\n                whereClause,\n                \"OR\",\n                selectParams,\n            );\n            return user[0];\n        // }\n        return generateError(\"Invalid Details\", 202);\n    }\n    return generateError(\"USER_NOT_EXISTS\", 404);\n};\n\n  \n \n\nexport const _UpdatedocAppQuerybystatusId = async (data) => {\n    const records = { ...data };\n    \n    const dbUser = await getDocAppStatusRecord(\n        tableNames.SEC_APPOINTMENTS,\n        { appointment_id: data.appointment_id, patient_id: data.patient_id },\n        \"AND\",\n        \"appointment_id, status\"\n    );\n\n    console.log('dbuser', dbUser);\n\n    if (dbUser.length) {\n        console.log('dbUser ====  ', dbUser[0].status);\n\n        if (dbUser[0].status === \"booked\") {\n          \n                records.status = \"in_progress\"; // Update the status to \"in_progress\"\n\n                const whereClause = {\n                    appointment_id: data.appointment_id, // Use the appointment_id as the condition\n                };\n                await updateRecord(tableNames.SEC_APPOINTMENTS, records, whereClause, \"AND\");\n                const user = await getDocAppStatusRecord(\n                    tableNames.SEC_APPOINTMENTS,\n                    whereClause,\n                    \"OR\",\n                    \"appointment_id, status\" // Select the updated status\n                );\n                return user[0];\n             \n            // Check if the current status is \"booked\"\n           \n        } else if (dbUser[0].status === \"in_progress\") {\n            // Check if the current status is \"in_progress\"\n            // Write code for video or chat consultation\n            // If successfully done, then the status is completed\n            records.status = \"completed\"; // Update the status to \"completed\"\n\n            const whereClause = {\n                appointment_id: data.appointment_id, // Use the appointment_id as the condition\n            };\n\n            await updateRecord(tableNames.SEC_APPOINTMENTS, records, whereClause, \"AND\");\n\n            const user = await getDocAppStatusRecord(\n                tableNames.SEC_APPOINTMENTS,\n                whereClause,\n                \"OR\",\n                \"appointment_id, status\" // Select the updated status\n            );\n            return user[0];\n        } else if (dbUser[0].status === \"completed\") {\n            records.status = \"completed\"; // The status remains \"completed\"\n\n            const whereClause = {\n                appointment_id: data.appointment_id, // Use the appointment_id as the condition\n            };\n\n            const user = await getDocAppStatusRecord(\n                tableNames.SEC_APPOINTMENTS,\n                whereClause,\n                \"OR\",\n                \"appointment_id, status\" // Select the current status\n            );\n            return user[0];\n        // } else if (records.status === \"cancelled\") {\n        //     records.status = \"cancelled\"; // Update the status to \"cancelled\"\n\n        //     const whereClause = {\n        //         appointment_id: data.appointment_id, // Use the appointment_id as the condition\n        //     };\n\n        //     await updateRecord(tableNames.SEC_APPOINTMENTS, records, whereClause, \"AND\");\n\n        //     const user = await getDocAppStatusRecord(\n        //         tableNames.SEC_APPOINTMENTS,\n        //         whereClause,\n        //         \"OR\",\n        //         \"appointment_id, status\" // Select the updated status\n        //     );\n        //     return user[0];\n        } else {\n            return generateError(\"INVALID_STATUS_REQUEST\", 404);\n        }\n    }\n    return generateError(\"APPOINTMENT_NOT_FOUND\", 404); // Appointment not found\n};\n\n \n \nexport const _createdoclisting = async (data) => {\n    // const records = { ...data };\n    // delete records.email;\n    const { doctor_id, listing_name , working_days , working_time ,  about} = data;\n    const params = {\n        doctor_id,\n    };\n    const dbUser = await getDocListingRecord(tableNames.SEC_DOCTOR_LISTING, params, \"OR\");\n    if (dbUser.length) {\n        if (dbUser[0].doctor_id === doctor_id) return generateError(\"Plan already exists\", 403);\n          \n    } else {\n        const newPlan = {\n            doctor_id, \n            listing_name, \n            working_days, \n            working_time,  \n            about,\n        };\n        await createRecord(tableNames.SEC_DOCTOR_LISTING, [newPlan], true, \"doctor_listing_id\");\n        return createSuccessResponse(\"LISTING ADDED\", 200);\n    }\n    return generateError(\"ERROR ADDING LISTING \", 404);\n  \n};\n\n\nexport const _updatedoclisting = async (data) => {\n    const records = { ...data };\n    delete records.doctor_id;\n\n    const dbUser = await getDocListingRecord(\n        tableNames.SEC_DOCTORS_DETAILS,\n        { doctor_id: data.doctor_id },\n        \"\",\n        \"doctor_id\",\n    );\n\n    if (dbUser.length) {\n        // if (dbUser[0].is_active === userStatus.ACTIVE) {\n            if (\n                dbUser[0].role_id === userRole.DOCTOR &&\n                dbUser[0].is_approved === userStatus.IN_ACTIVE\n            )\n                return generateError(\"ADMIN_APPROVAL_REQUIRED\", 202);\n\n            const selectParams =\n                \"listing_name , working_days , working_time ,  about\";\n\n            const whereClause = {\n                // email: dbUser[0].email,\n                doctor_id: dbUser[0].doctor_id,\n            };\n\n            // records.can_login = 0;\n\n            await updateRecord(tableNames.SEC_DOCTOR_LISTING, records, whereClause, \"AND\");\n\n            // await _insertAccessToken(dbUser[0], false);\n\n            const user = await getDocListingRecord(\n                tableNames.SEC_DOCTOR_LISTING,\n                whereClause,\n                \"OR\",\n                selectParams,\n            );\n            return user[0];\n        // }\n        return generateError(\"Invalid Details\", 400);\n    }\n    return generateError(\"USER_NOT_EXISTS\", 404);\n};","import { SESClient, SendEmailCommand } from \"@aws-sdk/client-ses\";\nimport { SNSClient, PublishCommand } from \"@aws-sdk/client-sns\";\n\nconst config = { region: process.env.REGION };\n\nconst sesClient = new SESClient(config);\nconst snsClient = new SNSClient(config);\n\nexport const sendEmailToUser = async (sendTo, subject, body) => {\n    try {\n        const input = {\n            Source: process.env.FROM_EMAIL_ADDRESS, // required\n            Destination: {\n                ToAddresses: [sendTo],\n            },\n            Message: {\n                // Message\n                Subject: {\n                    Charset: \"UTF-8\",\n                    Data: subject,\n                },\n                Body: {\n                    Html: {\n                        Charset: \"UTF-8\",\n                        Data: body,\n                    },\n                },\n            },\n            ReplyToAddresses: [process.env.FROM_EMAIL_ADDRESS],\n        };\n        const command = new SendEmailCommand(input);\n        const response = await sesClient.send(command);\n        console.log(`Email has been sent to ${sendTo}`);\n        console.log(response);\n        return response;\n    } catch (err) {\n        console.log(\"Error occured in sending email to user due to\", err);\n        throw err;\n    }\n};\n\nexport const sendOTPToUser = async (phoneNumber, message) => {\n    const messageAttributes = {\n        \"SEC.SNS.SMS.SMSType\": { DataType: \"String\", StringValue: \"Transactional\" },\n        \"SEC.SNS.SMS.SenderID\": { DataType: \"String\", StringValue: \"SenderID\" },\n        \"SEC.SNS.SMS.MessageType\": { DataType: \"String\", StringValue: \"SMS\" },\n        \"SEC.SNS.SMS.OriginationNumber\": { DataType: \"String\", StringValue: \"OriginationNumber\" },\n    };\n\n    try {\n        const publishParams = {\n            Message: message,\n            MessageAttributes: messageAttributes,\n            PhoneNumber: phoneNumber,\n        };\n        const command = new PublishCommand(publishParams);\n        const response = await snsClient.send(command);\n        console.log(\"Message sent. Message ID:\", response.MessageId);\n        console.log(`OTP sent successfully to ${phoneNumber}`);\n        console.log(response);\n        return response;\n    } catch (err) {\n        console.log(\"Error occured in sending otp to user due to\", err);\n        console.error(`Failed to send OTP to ${phoneNumber}:`, err);\n        throw err;\n    }\n};\n","#!/usr/bin/env node\n\n\"strict mode\";\n\nclass ProfileImage {\n    constructor(initials, options = {}) {\n        this.initials = initials;\n        this.width = 100;\n        this.height = 100;\n        this.textColor = options.textColor || \"#ffffff\";\n        this.backgroundColor = options.backgroundColor;\n        this.fontFamily = options.fontFamily || \"sans-serif\";\n        this.fontSize = this.height / (this.initials.length * 0.5 + 1);\n        this.fontWeight = options.fontWeight || \"bold\";\n    }\n\n    png() {\n        // returns png as base64 string\n        /* eslint-disable global-require */\n        const { createCanvas } = require(\"canvas\");\n        const canvas = createCanvas(this.width, this.height);\n        const context = canvas.getContext(\"2d\");\n\n        const centerX = this.width / 2;\n        const centerY = this.height / 2;\n        const radius = this.height / 2;\n\n        context.beginPath();\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n        context.fillStyle = `#${this.backgroundColor}`;\n        context.fill();\n\n        context.font = `${this.fontSize}px ${this.fontFamily}`;\n        context.textAlign = \"center\";\n        context.fillStyle = this.textColor;\n\n        // context.textBaseline = \"middle\";\n        context.fillText(\n            this.initials,\n            canvas.width / 2,\n            canvas.height / 2 + (this.fontSize * 0.68) / 2,\n        );\n        return canvas.toDataURL(\"image/png\");\n    }\n}\n\nexport const getRandomColor = async () => {\n    let color = \"\";\n    const possible = \"ABCDEFabcdef0123456789\";\n    for (let i = 0; i < 6; i++)\n        color += possible.charAt(Math.floor(Math.random() * possible.length));\n    return color;\n};\n\nexport const generateDummyProfileImg = async (name) => {\n    const color = await getRandomColor();\n    const text = name.slice(0, 2).toUpperCase();\n\n    const img = new ProfileImage(text, {\n        backgroundColor: color,\n    });\n\n    const src = img.png();\n\n    return src;\n};\n","\"strict mode\";\n\nimport { randomNumber } from \"../configs/common\";\nimport { sendEmailToUser } from \"./aws-helper\";\n\nexport const sendActivationCode = async (email, code, sub, action) => {\n    console.log(email, code, sub, action);\n    try {\n        const subject = `Share-e-care ${sub} code`;\n        const body = `<html> \\\n                        <head> \\\n                            <title>Welcome to Share-e-care</title> \\\n                        </head> \\\n                        <body> \\\n                            <div>Please use this code to ${action}. Your code is ${code} and will expire in ${randomNumber.minutes} minutes</div> \\\n                        </body> \\\n                        </html>`;\n\n        // await sendEmailToUser(email, subject, body);\n        console.log(\"Code has been sent to \", email);\n    } catch (err) {\n        console.log(\"Error occured in sending activation code due to\", err);\n        throw err;\n    }\n};\n","import { registration_type } from \"../../configs/sec-types\";\n\nexport const getUserModel = (data) => {\n    const newData = { ...data };\n    if (newData.token_id === undefined) {\n        newData.registration_type = registration_type.EMAIL;\n        newData.tokens = [];\n    } else {\n        newData.registration_type = registration_type.SSO;\n        newData.tokens = [\n            { token_id: newData.token_id, SSO_type: newData.registered_via, is_login: true },\n        ];\n    }\n\n    const userData = {\n        email: newData.email ? newData.email.trim() : newData.email,\n        first_name: newData.first_name ? newData.first_name.trim() : newData.first_name,\n        last_name: newData.last_name ? newData.last_name.trim() : newData.last_name,\n        middle_name: newData.middle_name ? newData.middle_name.trim() : newData.middle_name,\n        added_by: newData.added_by || \"\",\n        gender: newData.gender || \"\",\n        DOB: newData.DOB ? newData.DOB.trim() : newData.DOB,\n        country_id: newData.country_id,\n        state_id: newData.state_id,\n        city_id: newData.city_id,\n        street_address1: newData.street_address1,\n        street_address2: newData.street_address2,\n        zip_code: newData.zip_code,\n    };\n\n    return userData;\n};\n","module.exports = require(\"@aws-sdk/client-ses\");","module.exports = require(\"@aws-sdk/client-sns\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"canvas\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"serverless-mysql\");","module.exports = require(\"crypto\");","module.exports = require(\"fs\");","module.exports = require(\"https\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/* eslint-disable prettier/prettier */\nimport { tableNames } from \"../database/tables\";\nimport { getAllRecords, doctordetailscompleteQuery,doctordetailscompleteQueryId, patientappointmentQuerybystatusid, doctordetailsQueryId, docAppointmentdetailsQuerybyId, docAppointmentQuerybystatusId, createRecord, getRecordByParams, runRawQuery, runRawQueryid, updateRecord, completeDoctorsDetails, completeDoctorsDetailsId, appointmentQuery\n    , DocDashboardAppQuery, DocDashoardAppstatusQuery, DocNotificationQuery, DocAppointmentHistory, DoctransactionQuery\n    } from \"../database/helper\";\n// import { getAllRecords, getRecordByParams } from \"../database/helper\";\n// import { getCountryCodesList } from \"./helpers\";\nimport {\n    createSuccessResponse,\n    createErrorResponse,\n    parseEventBody,\n    parseError,\n} from \"../configs/utility\";\nimport {\n    _createdoclisting,\n    _updateDoctorDetails,\n    _UpdatedocAppQuerybystatusId\n} from \"./user-adapter\";\nimport { getUserModel } from \"../helpers/models/user-model\";\n\nexport const getDoctorprofile = async (event, context, callback) => {\n    try {\n        const doctorprofile = await getAllRecords(tableNames.SEC_USERS);\n        return createSuccessResponse({ response: doctorprofile }, 200);\n    } catch (err) {\n        console.log(\"Error in getDoctorprofile handler\", err, err.statusCode);\n        return createErrorResponse({ error: err.message }, 500);\n    }\n};\n\nexport const getDoctordetails = async (event, context, callback) => {\n    try {\n        const doctordetails = await getAllRecords(tableNames.SEC_DOCTORS_DETAILS);\n        return createSuccessResponse({ response: doctordetails }, 200);\n    } catch (err) {\n        console.log(\"Error in getDoctordetails handler\", err, err.statusCode);\n        return createErrorResponse({ error: err.message }, 500);\n    }\n};\n\n\n\nexport const getDoctordetailscompleteall = async (event, context, callback) => {\n    try {\n     const doctordetails = await completeDoctorsDetails(tableNames.VW_SEC_COMPLETE_DOCTOR_DETAILS);\n        return createSuccessResponse({ response: doctordetails }, 200);\n    } catch (err) {\n        console.log(\"Error in getDoctordetails handler\", err, err.statusCode);\n        return createErrorResponse({ error: err.message }, 500);\n    }\n};\n\n// export const getcompleteDoctorsDetailsId = async (event, context, callback) => {\n//     try {\n//         // eslint-disable-next-line prefer-destructuring\n//         const id = event.pathParameters.id;\n//         const doctordetails = await completeDoctorsDetailsId(tableNames.VW_SEC_COMPLETE_DOCTOR_DETAILS,\"doctor_details_id\", id);\n//         return createSuccessResponse({ response: doctordetails }, 200);\n//     } catch (err) {\n//         console.log(\"Error in getDoctordetails handler\", err, err.statusCode);\n//         return createErrorResponse({ error: err.message }, 500);\n//     }\n// };\n\n// export const getcompleteDoctorsDetailsId = async (event, context, callback) => {\n//     try {\n//         // eslint-disable-next-line prefer-destructuring\n//         const id = event.pathParameters.id;\n//         const doctordetails = await completeDoctorsDetailsId(tableNames.VW_SEC_COMPLETE_DOCTOR_DETAILS,\"doctor_details_id\", id);\n//         return createSuccessResponse({ response: doctordetails }, 200);\n//     } catch (err) {\n//         console.log(\"Error in getDoctordetails handler\", err, err.statusCode);\n//         return createErrorResponse({ error: err.message }, 500);\n//     }\n// };\n\n\n// export const getCompleteAppointmentdetails = async (event, context, callback) => {\n//     try {\n//         const completeappointment = await completeappointmentQuery(tableNames.SEC_APPOINTMENTS);\n//         return createSuccessResponse({ response: completeappointment }, 200);\n//     } catch (err) {\n//         console.log(\"Error in complete appointment details handler\", err, err.statusCode);\n//         return createErrorResponse({ error: err.message }, 500);\n//     }\n// };\n\n\n// export const getAppointmentbystatusid = async (event, context, callback) => {\n//     try {\n//         const app_status = event.pathParameters.status;\n//         const app_id = event.pathParameters.id;\n//         const appointmentbystatusid = await appointmentbystatusQueryid(tableNames.SEC_APPOINTMENTS, app_status, app_id);\n//         return createSuccessResponse({ response: appointmentbystatusid }, 200);\n//     } catch (err) {\n//         console.log(\"Error in appointment status handler\", err, err.statusCode);\n//         return createErrorResponse({ error: err.message }, 500);\n//     }\n// };\n\n// export const getDocDetailscomplete = async (event, context, callback) => {\n//     try {\n//         const doctordetailscomplete = await doctordetailscompleteQuery(tableNames.SEC_USERS, tableNames.SEC_DOCTORS_DETAILS, tableNames.SEC_DEPARTMENTS, \"suid\",\"doctor_id\",\"speciality_id\",\"department_id\");\n//         console.log(doctordetailscomplete);\n//         return createSuccessResponse({ response: doctordetailscomplete }, 200);\n//     } catch (err) {\n//         console.log(\"Error in getDoctordetailscomplete handler\", err, err.statusCode);\n//         return createErrorResponse({ error: err.message }, 500);\n//     }\n// };\n// --------------------------------------\n\nexport const getDocDashoardApp = async (event, context, callback) => {\n    try {\n        const doc_id = event.pathParameters.id;\n        const DocDashoardApp = await DocDashboardAppQuery(tableNames.SEC_APPOINTMENTS, doc_id);\n        return createSuccessResponse({ response: DocDashoardApp }, 200);\n    } catch (err) {\n        console.log(\"Error in Dashboard appointments handler\", err, err.statusCode);\n        return createErrorResponse({ error: err.message }, 500);\n    }\n};\n\n\nexport const getDocDashoardAppstatus = async (event, context, callback) => {\n    try {\n        const doc_id = event.pathParameters.id;\n        const app_status = event.pathParameters.status;\n        const DocDashoardAppstatus = await DocDashoardAppstatusQuery(tableNames.SEC_APPOINTMENTS, app_status, doc_id);\n        return createSuccessResponse({ response: DocDashoardAppstatus }, 200);\n    } catch (err) {\n        console.log(\"Error in Dashboard appointments handler\", err, err.statusCode);\n        return createErrorResponse({ error: err.message }, 500);\n    }\n};\n\n\n\nexport const getDocNotification = async (event, context, callback) => {\n    try {\n        const doc_id = event.pathParameters.id; \n        const DocNotification = await DocNotificationQuery(tableNames.SEC_APPOINTMENTS, doc_id);\n        return createSuccessResponse({ response: DocNotification }, 200);\n    } catch (err) {\n        console.log(\"Error in Dashboard appointments handler\", err, err.statusCode);\n        return createErrorResponse({ error: err.message }, 500);\n    }\n};\n\n\n\nexport const getDoctorsDetailsbyId = async (event, context, callback) => {\n    try {\n        // eslint-disable-next-line prefer-destructuring\n        const doc_id = event.pathParameters.id;\n        const doctordetailsId = await doctordetailsQueryId(tableNames.SEC_USERS, tableNames.SEC_DOCTORS_DETAILS, tableNames.SEC_DEPARTMENTS, \"suid\",\"doctor_id\",\"speciality_id\",\"department_id\",\"doctor_details_id\", doc_id);\n        console.log('doctordetailsId', doctordetailsId);\n        // console.log('docid',id);\n        return createSuccessResponse({ response: doctordetailsId }, 200);\n    } catch (err) {\n        console.log(\"Error in getDoctordetails handler\", err, err.statusCode);\n        return createErrorResponse({ error: err.message }, 500);\n    }\n};\n\n\nexport const updateDoctorDetails = async (event) => {\n    try {\n        const data = parseEventBody(event.body);\n        console.log(data);\n        const user = await _updateDoctorDetails(data);\n        console.log(user);\n        if (user) {\n            return createSuccessResponse({ response: user }, 200);\n        }\n        return createSuccessResponse({ response: \" register number exists\" }, 200);\n    } catch (err) {\n        console.log(\"Error missing \", err, err.message);\n        const { message, code } = parseError(err.message);\n        return createErrorResponse({ error: message }, code || 500);\n    }\n\n};\n\n\n\n// Doctor Listing API\n\n\n\n\nexport const getdocAppointmentdetailsId = async (event, context, callback) => {\n    try {\n        const app_id = event.pathParameters.id;\n        const completeappointmentbyId = await docAppointmentdetailsQuerybyId(tableNames.SEC_APPOINTMENTS, app_id);\n        return createSuccessResponse({ response: completeappointmentbyId }, 200);\n    } catch (err) {\n        console.log(\"Error in complete appointment details handler\", err, err.statusCode);\n        return createErrorResponse({ error: err.message }, 500);\n    }\n};\n\nexport const getdocAppointmentbystatusId = async (event, context, callback) => {\n    try {\n        const app_id = event.pathParameters.id;\n        const app_status = event.pathParameters.status;\n        const appointmentbystatus = await docAppointmentQuerybystatusId(tableNames.SEC_APPOINTMENTS, app_status, app_id);\n        console.log(appointmentbystatus);\n        return createSuccessResponse({ response: appointmentbystatus }, 200);\n    } catch (err) {\n        console.log(\"Error in appointment status handler\", err, err.statusCode);\n        return createErrorResponse({ error: err.message }, 500);\n    }\n};\n\n\n\n\n\nexport const UpdatedocAppbystatusId = async (event) => {\n    try {\n        const data = parseEventBody(event.body);\n        console.log('data',data);\n        const user = await _UpdatedocAppQuerybystatusId(data);\n        console.log('user' , user);\n        if (user) {\n            return createSuccessResponse({ response: user }, 200);\n        }\n        return createSuccessResponse({ response: \"Appointment Confirmed\" }, 200);\n    } catch (err) {\n        console.log(\"Error missing \", err, err.message);\n        const { message, code } = parseError(err.message);\n        return createErrorResponse({ error: message }, code || 500);\n    }\n\n};\n\n \n// Doctor Listing API\nexport const create_doc_listing = async (event) => {\n    try {\n        const data = parseEventBody(event.body);\n        console.log(data);\n        const user = await _createdoclisting(data);\n        console.log(user);\n        if (user) {\n            return createSuccessResponse({ response: user }, 200);\n        }\n        return createSuccessResponse({ response: \"Listing Already Exists\" }, 200);\n    } catch (err) {\n        console.log(\"Error missing \", err, err.message);\n        const { message, code } = parseError(err.message);\n        return createErrorResponse({ error: message }, code || 500);\n    }\n\n};\n\nexport const getDocAppointmentHistoryId = async (event, context, callback) => {\n    try {\n        const app_id = event.pathParameters.id;\n        const DoctortAppointmentHistory = await DocAppointmentHistory(tableNames.SEC_APPOINTMENTS, app_id);\n        return createSuccessResponse({ response: DoctortAppointmentHistory }, 200);\n    } catch (err) {\n        console.log(\"Error in Doctor appointment History handler\", err, err.statusCode);\n        return createErrorResponse({ error: err.message }, 500);\n    }\n};\n\nexport const getDocTransaction = async (event, context, callback) => {\n    try {\n        const doc_id = event.pathParameters.id;\n        const DocTransaction = await DoctransactionQuery(tableNames.SEC_TRANSACTIONS, doc_id);\n        return createSuccessResponse({ response: DocTransaction }, 200);\n    } catch (err) {\n        console.log(\"Error in Transaction Query   handler\", err, err.statusCode);\n        return createErrorResponse({ error: err.message }, 500);\n    }\n};\n\n\n"],"names":["randomNumber","length","containers","minutes","OTP","thumbnail","width","height","imgFormat","SMSmessages","activation_code_message","aws","s3","params","Bucket","Domain","settings","root_path","feedback_path","image_path","file_path","app","jwtSecret","process","env","JWT_SECRET","envMapping","development","production","test","totalFilesSize","result","SUCCESS","EMAIL_EXISTS","MOBILE_EXISTS","USER_NOT_EXISTS","USER_EXISTS","USER_PASSWORD_INCORRECT","REGISTRATION_NOT_CONFIRMED","ACTIVATION_CODE_EXPIRED","ACTIVATION_CODE_MISMATCH","ALREADY_ACTIVE_MEMBER","VALUE_NULL","DOCUMENT_N0T_EXISTS","FIREBASE_NOTIFICATION_ERROR","ZERO_RESULTS","OVER_QUERY_LIMIT","REQUEST_DENIED","INVALID_REQUEST","UNKNOWN_ERROR","OK","BAD","DENIED","FORBIDDEN","SERVER_ERROR","notificationType","BROADCAST","UNICAST","userRole","SUPER_ADMIN","ADMIN","DOCTOR","HCF","PATIENT","userStatus","ACTIVE","IN_ACTIVE","DELETED","TRUNK","isPublished","PUBLISHED","UNPUBLISHED","isCompleted","COMPLETED","NOT_COMPLETED","mailType","welcome","resetPassword","error","notificationStatus","unRead","read","isSent","sent","notSent","registration_type","EMAIL","SSO","registration_from","WEB","APP","expirationTime","normal","hours","seconds","unit","remember","jwt","https","fs","crypto","cryptoAlgorithm","cryptoPassword","Buffer","from","CRYPTO_PASSWORD","IV_LENGTH","randomStringLength","chars","OTPlength","OTPchars","getRandomNumber","i","Math","round","random","getOTP","hashString","password","iv","randomBytes","cipher","createCipheriv","encrypted","update","finalBuffer","concat","final","toString","descryptHashString","textParts","split","shift","encryptedText","join","decipher","createDecipheriv","decrypted","generateJWT","user_id","remember_me","sign","expiresIn","decodeJWT","token","decoded","verify","err","addHoursToDate","date","Date","setHours","getHours","addMinutesToDate","setMinutes","getMinutes","getFilenameAndExtension","pathfilename","filenameextension","replace","filename","substring","lastIndexOf","ext","pop","groupBy","arr","key","initialValue","reduce","acc","cval","myAttribute","createSuccessResponse","body","statusCode","bodyString","JSON","stringify","headers","createErrorResponse","streamToString","stream","Promise","resolve","reject","chunks","on","chunk","push","parseCookies","request","list","cookieHeader","queryStringParameters","cookie","cookies","Cookie","authorization","Authorization","forEach","name","rest","trimedName","trim","value","decodeURIComponent","console","log","formatDate","newDate","getMonth","getDate","getFullYear","createDirectory","path","existsSync","mkdirSync","downloadFile","url","filePath","get","response","code","Error","statusMessage","location","fileWriter","createWriteStream","pipe","getDomainWithoutSubdomain","domain","domainCharacters","reverse","domainReversed","dotCount","splice","getFilesizeInBytes","stats","statSync","size","getPeriodStartEnd","periodType","startDate","endDate","setDate","setMonth","setFullYear","stringifyError","message","parseEventBody","parseBody","parse","errObj","parseError","generateError","initConnection","queryDatabase","query","conn","rows","end","createRecord","table","records","getResults","column","columns","Object","keys","values","map","record","insertResult","insertId","selectQuery","selectResult","updateRecord","whereColumns","joinParams","ele","whereClause","getAllRecords","getRecordByParams","selectParams","order","orderBy","deleteRecord","runRawQuery","table1","table2","table3","column1","column2","column3","column4","completeDoctorsDetails","completeDoctorsDetailsId","id","appointmentQuery","completeappointmentQuery","DocDashboardAppQuery","doc_id","DocDashoardAppstatusQuery","app_status","app_id","DocNotificationQuery","docAppointmentdetailsQuerybyId","docAppointmentQuerybystatusId","getDocAppStatusRecord","getDocListingRecord","getDocAppRecord","doctordetailsQueryId","column5","getDocDetailRecord","DocAppointmentHistory","DoctransactionQuery","dashboarddocdetailsQuery","dashboarddocdetailsQueryId","dashboardhcfdetailsQuery","dashboardhcfdetailsQueryId","hcf_id","patientActivityQuery","patientNotificationQuery","patientappQuerybystatusid","appointmentHistoryQuery","patienttransactionQuery","patientPlanQuery","pat_id","mysql","pool","config","host","DB_HOST","user","DB_USER","DB_PASSWORD","database","DB_DATABASE","waitForConnections","connectionLimit","CONNECTION_LIMIT","queueLimit","QUEUE_LIMIT","tableNames","SEC_COUNTRIES","SEC_STATES","SEC_CITIES","SEC_ROLES","SEC_DEPARTMENTS","SEC_USERS","SEC_USER_CODES","SEC_PATIENT_PLANS","SEC_DOCTORS_DETAILS","VW_SEC_COMPLETE_DOCTOR_DETAILS","SEC_APPOINTMENTS","SEC_TRANSACTIONS","SEC_DOCTOR_LISTING","SEC_HCF_DETAILS","sendActivationCode","generateDummyProfileImg","sendOTPToUser","_updateDoctorDetails","data","_objectSpread","dbUser","doctor_id","role_id","is_approved","_UpdatedocAppQuerybystatusId","appointment_id","patient_id","status","_createdoclisting","listing_name","working_days","working_time","about","newPlan","_updatedoclisting","SESClient","SendEmailCommand","SNSClient","PublishCommand","region","REGION","sesClient","snsClient","sendEmailToUser","sendTo","subject","input","Source","FROM_EMAIL_ADDRESS","Destination","ToAddresses","Message","Subject","Charset","Data","Body","Html","ReplyToAddresses","command","send","phoneNumber","messageAttributes","DataType","StringValue","publishParams","MessageAttributes","PhoneNumber","MessageId","ProfileImage","constructor","initials","options","textColor","backgroundColor","fontFamily","fontSize","fontWeight","png","createCanvas","require","canvas","context","getContext","centerX","centerY","radius","beginPath","arc","PI","fillStyle","fill","font","textAlign","fillText","toDataURL","getRandomColor","color","possible","charAt","floor","text","slice","toUpperCase","img","src","email","sub","action","getUserModel","newData","token_id","undefined","tokens","SSO_type","registered_via","is_login","userData","first_name","last_name","middle_name","added_by","gender","DOB","country_id","state_id","city_id","street_address1","street_address2","zip_code","doctordetailscompleteQuery","doctordetailscompleteQueryId","patientappointmentQuerybystatusid","runRawQueryid","getDoctorprofile","event","callback","doctorprofile","getDoctordetails","doctordetails","getDoctordetailscompleteall","getDocDashoardApp","pathParameters","DocDashoardApp","getDocDashoardAppstatus","DocDashoardAppstatus","getDocNotification","DocNotification","getDoctorsDetailsbyId","doctordetailsId","updateDoctorDetails","getdocAppointmentdetailsId","completeappointmentbyId","getdocAppointmentbystatusId","appointmentbystatus","UpdatedocAppbystatusId","create_doc_listing","getDocAppointmentHistoryId","DoctortAppointmentHistory","getDocTransaction","DocTransaction"],"sourceRoot":""}