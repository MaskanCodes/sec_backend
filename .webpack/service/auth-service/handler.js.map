{"version":3,"file":"auth-service/handler.js","mappings":"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","sources":["webpack://sec-backend/./auth-service/user-adapter.js","webpack://sec-backend/./configs/common.js","webpack://sec-backend/./configs/sec-types.js","webpack://sec-backend/./configs/utility.js","webpack://sec-backend/./database/helper.js","webpack://sec-backend/./database/index.js","webpack://sec-backend/./database/tables.js","webpack://sec-backend/./helpers/aws-helper.js","webpack://sec-backend/./helpers/image-helper.js","webpack://sec-backend/./helpers/mail-helper.js","webpack://sec-backend/./helpers/models/user-model.js","webpack://sec-backend/external commonjs \"@aws-sdk/client-ses\"","webpack://sec-backend/external commonjs \"@aws-sdk/client-sns\"","webpack://sec-backend/external commonjs \"@babel/runtime/helpers/defineProperty\"","webpack://sec-backend/external commonjs \"canvas\"","webpack://sec-backend/external commonjs \"jsonwebtoken\"","webpack://sec-backend/external commonjs \"serverless-mysql\"","webpack://sec-backend/external node-commonjs \"crypto\"","webpack://sec-backend/external node-commonjs \"fs\"","webpack://sec-backend/external node-commonjs \"https\"","webpack://sec-backend/webpack/bootstrap","webpack://sec-backend/webpack/runtime/compat get default export","webpack://sec-backend/webpack/runtime/define property getters","webpack://sec-backend/webpack/runtime/hasOwnProperty shorthand","webpack://sec-backend/webpack/runtime/make namespace object","webpack://sec-backend/./auth-service/handler.js"],"sourcesContent":["import { createRecord, getRecordByParams, runRawQuery, updateRecord } from \"../database/helper\";\nimport { tableNames } from \"../database/tables\";\nimport {\n    hashString,\n    generateJWT,\n    addHoursToDate,\n    descryptHashString,\n    generateError,\n    getOTP,\n    getRandomNumber,\n} from \"../configs/utility\";\nimport { expirationTime, userStatus, userRole } from \"../configs/sec-types\";\nimport { sendActivationCode } from \"../helpers/mail-helper\";\nimport { generateDummyProfileImg } from \"../helpers/image-helper\";\nimport { sendOTPToUser } from \"../helpers/aws-helper\";\nimport { randomNumber } from \"../configs/common\";\n\nexport const _registerUser = async (userData) => {\n    let OTP = null;\n    const { email, mobile: contact_no_primary, role_id, password, added_by } = userData;\n    const params = {\n        email,\n        contact_no_primary,\n    };\n    const dbUser = await getRecordByParams(tableNames.SEC_USERS, params, \"OR\");\n\n    if (dbUser.length) {\n        if (dbUser[0].email === email.toLowerCase()) return generateError(\"EMAIL_EXISTS\", 403);\n        if (dbUser[0].contact_no_primary === contact_no_primary)\n            return generateError(\"MOBILE_EXISTS\", 403);\n    } else {\n        const newUser = {\n            email,\n            contact_no_primary,\n            role_id,\n            password,\n            added_by,\n        };\n\n        newUser.profile_picture = await generateDummyProfileImg(email);\n\n        if (newUser.password)\n            newUser.password = hashString(newUser.password ? newUser.password : \"\");\n        else {\n            OTP = getOTP();\n            newUser.password = hashString(OTP);\n        }\n        const user = await createRecord(tableNames.SEC_USERS, [newUser], true, \"suid\");\n\n        const activationCodeData = {\n            activation_code: getRandomNumber(),\n            activation_code_generated_on: new Date(),\n            suid: user.suid,\n            email: user.email,\n        };\n\n        await _insertActivationCode(activationCodeData);\n\n        await createRecord(tableNames.SEC_PATIENT_PLANS, [newUser], true, \"suid\");\n\n        return generateError(\"EMAIL_NOT_VERIFIED\", 202);\n    }\n    return generateError(\"REGISTRATION_FAILED\", 404);\n};\n\nexport const _authenticateUser = async (userData) => {\n    const { email, mobile, password, remember_me, login_with_email } = userData;\n\n    const params = {\n        email,\n        contact_no_primary: mobile,\n    };\n\n    const dbUser = await getRecordByParams(tableNames.SEC_USERS, params, \"OR\");\n\n    const selectParams =\n        \"suid, email, profile_picture, access_token, access_token_expires_on, free_trial_expiration\";\n\n    if (dbUser.length) {\n        if (dbUser[0].is_active === userStatus.ACTIVE) {\n            if (dbUser[0].can_login === userStatus.ACTIVE) {\n                if (login_with_email) {\n                    const checkPwd = password === descryptHashString(dbUser[0].password);\n\n                    if (checkPwd) {\n                        if (!dbUser[0].free_trial_expiration) {\n                            const currentDate = new Date();\n                            currentDate.setDate(currentDate.getDate() + 14);\n\n                            await _updateProfile({\n                                free_trial_expiration: currentDate,\n                                email,\n                            });\n                        } else if (new Date() > new Date(dbUser[0].free_trial_expiration)) {\n                            return generateError(\"SUBSCRIPTION_EXPIRED\", 202);\n                        }\n                        await _insertAccessToken(dbUser[0], remember_me);\n\n                        const user = await getRecordByParams(\n                            tableNames.SEC_USERS,\n                            params,\n                            \"OR\",\n                            selectParams,\n                        );\n                        return user[0];\n                    }\n                    return generateError(\"USER_PASSWORD_INCORRECT\", 404);\n                }\n                await _sendOtpCode(dbUser[0].suid, dbUser[0].contact_no_primary);\n                return {\n                    message: \"ACTIVATION_CODE_SENT\",\n                };\n            }\n            return generateError(\"INCOMPLETE_PROFILE\", 202);\n        }\n        return generateError(\"EMAIL_NOT_VERIFIED\", 202);\n    }\n    return generateError(\"USER_NOT_EXISTS\", 404);\n};\n\nexport const _verifyEmail = async (data) => {\n    const { email, activation_code } = data;\n\n    const params = {\n        email,\n    };\n    const dbUser = await getRecordByParams(\n        tableNames.SEC_USERS,\n        params,\n        \"\",\n        \"suid, is_active, role_id, is_approved\",\n    );\n\n    if (dbUser.length) {\n        if (dbUser[0].is_active === userStatus.ACTIVE) {\n            if (\n                dbUser[0].role_id === userRole.DOCTOR &&\n                dbUser[0].is_approved === userStatus.IN_ACTIVE\n            )\n                return generateError(\"ADMIN_APPROVAL_REQUIRED\", 202);\n            return {\n                message: \"EMAIL_VERIFIED\",\n            };\n        }\n        const codeParams = {\n            user_id: dbUser[0].suid,\n            activation_code,\n        };\n        const isValidActivationCode = await getRecordByParams(\n            tableNames.SEC_USER_CODES,\n            codeParams,\n            \"AND\",\n            \"*\",\n            \"desc\",\n            \"code_id\",\n        );\n\n        if (isValidActivationCode.length) {\n            const codeGeneratedDate = new Date(\n                isValidActivationCode[0].activation_code_generated_on,\n            );\n            codeGeneratedDate.setMinutes(codeGeneratedDate.getMinutes() + randomNumber.minutes);\n\n            if (codeGeneratedDate >= new Date()) {\n                if (\n                    activation_code.toString() ===\n                    isValidActivationCode[0].activation_code.toString()\n                ) {\n                    const records = {\n                        is_active: userStatus.ACTIVE,\n                    };\n\n                    const whereClause = {\n                        suid: dbUser[0].suid,\n                        email,\n                    };\n\n                    await updateRecord(tableNames.SEC_USERS, records, whereClause, \"AND\");\n                } else return generateError(\"INVALID_ACTIVATION_CODE\", 404);\n            } else {\n                return generateError(\"ACTIVATION_CODE_EXPIRED\", 404);\n            }\n            return {\n                message: \"EMAIL_VERIFIED\",\n            };\n        }\n        return generateError(\"INVALID_ACTIVATION_CODE\", 404);\n    }\n    return generateError(\"USER_NOT_EXISTS\", 404);\n};\n\nexport const _updateProfile = async (data) => {\n    const records = { ...data };\n    delete records.email;\n\n    const dbUser = await getRecordByParams(\n        tableNames.SEC_USERS,\n        { email: data.email },\n        \"\",\n        \"suid, email, is_active, role_id, is_approved\",\n    );\n\n    if (dbUser.length) {\n        if (dbUser[0].is_active === userStatus.ACTIVE) {\n            if (\n                dbUser[0].role_id === userRole.DOCTOR &&\n                dbUser[0].is_approved === userStatus.IN_ACTIVE\n            )\n                return generateError(\"ADMIN_APPROVAL_REQUIRED\", 202);\n\n            const selectParams =\n                \"suid, email, profile_picture, access_token, access_token_expires_on, free_trial_expiration\";\n\n            const whereClause = {\n                email: dbUser[0].email,\n                suid: dbUser[0].suid,\n            };\n\n            records.can_login = 0;\n\n            await updateRecord(tableNames.SEC_USERS, records, whereClause, \"AND\");\n\n            await _insertAccessToken(dbUser[0], false);\n\n            const user = await getRecordByParams(\n                tableNames.SEC_USERS,\n                whereClause,\n                \"OR\",\n                selectParams,\n            );\n            return user[0];\n        }\n        return generateError(\"EMAIL_NOT_VERIFIED\", 202);\n    }\n    return generateError(\"USER_NOT_EXISTS\", 404);\n};\n\nexport const _verifyOtp = async (data) => {\n    const { mobile: contact_no_primary, otp_code } = data;\n\n    const params = {\n        contact_no_primary,\n    };\n    const dbUser = await getRecordByParams(\n        tableNames.SEC_USERS,\n        params,\n        \"\",\n        \"suid, is_active, role_id, is_approved, can_login, free_trial_expiration\",\n    );\n\n    if (dbUser.length) {\n        const codeParams = {\n            user_id: dbUser[0].suid,\n            otp_code,\n        };\n        const isValidActivationCode = await getRecordByParams(\n            tableNames.SEC_USER_CODES,\n            codeParams,\n            \"AND\",\n            \"*\",\n            \"desc\",\n            \"user_id\",\n        );\n\n        if (isValidActivationCode.length) {\n            const codeGeneratedDate = new Date(isValidActivationCode[0].otp_code_generated_on);\n            codeGeneratedDate.setMinutes(codeGeneratedDate.getMinutes() + randomNumber.minutes);\n\n            if (codeGeneratedDate >= new Date()) {\n                if (\n                    otp_code.toString() === isValidActivationCode[0].otp_code.toString() &&\n                    isValidActivationCode[0].is_expired === userStatus.ACTIVE\n                ) {\n                    const selectParams =\n                        \"suid, email, profile_picture, access_token, access_token_expires_on, free_trial_expiration\";\n\n                    if (dbUser[0].is_active === userStatus.ACTIVE) {\n                        if (\n                            dbUser[0].role_id === userRole.DOCTOR &&\n                            dbUser[0].is_approved === userStatus.IN_ACTIVE\n                        )\n                            return generateError(\"ADMIN_APPROVAL_REQUIRED\", 202);\n                        if (dbUser[0].can_login === userStatus.IN_ACTIVE)\n                            return generateError(\"INCOMPLETE_PROFILE\", 202);\n\n                        if (!dbUser[0].free_trial_expiration) {\n                            const currentDate = new Date();\n                            currentDate.setDate(currentDate.getDate() + 14);\n\n                            await _updateProfile({\n                                free_trial_expiration: currentDate,\n                                email: dbUser[0],\n                            });\n                        } else if (new Date() > new Date(dbUser[0].free_trial_expiration)) {\n                            return generateError(\"SUBSCRIPTION_EXPIRED\", 202);\n                        }\n                        await _insertAccessToken(dbUser[0], false);\n\n                        const user = await getRecordByParams(\n                            tableNames.SEC_USERS,\n                            params,\n                            \"OR\",\n                            selectParams,\n                        );\n                        return user[0];\n                    }\n                    return generateError(\"EMAIL_NOT_VERIFIED\", 202);\n                }\n                return generateError(\"INVALID_OTP_CODE\", 404);\n            }\n            return generateError(\"ACTIVATION_CODE_EXPIRED\", 404);\n        }\n        return generateError(\"INVALID_OTP_CODE\", 404);\n    }\n    return generateError(\"USER_NOT_EXISTS\", 404);\n};\n\nexport const _resendCode = async (data) => {\n    const { email, mobile: contact_no_primary } = data;\n\n    const params = {};\n\n    if (email) {\n        params.email = email;\n    }\n    if (contact_no_primary) {\n        params.contact_no_primary = contact_no_primary;\n    }\n\n    const dbUser = await getRecordByParams(\n        tableNames.SEC_USERS,\n        params,\n        \"\",\n        \"suid, email, contact_no_primary, is_active, role_id, is_approved, can_login\",\n    );\n\n    if (dbUser.length) {\n        if (dbUser[0].role_id === userRole.DOCTOR && dbUser[0].is_approved === userStatus.IN_ACTIVE)\n            return generateError(\"ADMIN_APPROVAL_REQUIRED\", 202);\n\n        if (email) {\n            const existingCodeData = await runRawQuery(\n                `SELECT * from ${tableNames.SEC_USER_CODES} WHERE user_id = ${dbUser[0].suid} AND activation_code IS NOT NULL ORDER BY code_id DESC`,\n            );\n\n            if (existingCodeData.length) {\n                const codeGeneratedDate = new Date(\n                    existingCodeData[0].activation_code_generated_on,\n                );\n                codeGeneratedDate.setMinutes(codeGeneratedDate.getMinutes() + randomNumber.minutes);\n\n                if (existingCodeData[0].no_of_email_tries < 3) {\n                    return _updateActivationCode(\n                        existingCodeData[0],\n                        dbUser[0].suid,\n                        dbUser[0].email,\n                    );\n                }\n                if (new Date() > codeGeneratedDate) {\n                    const activationCodeData = {\n                        activation_code: getRandomNumber(),\n                        activation_code_generated_on: new Date(),\n                        suid: dbUser[0].suid,\n                        email: dbUser[0].email,\n                    };\n                    return _insertActivationCode(\n                        activationCodeData,\n                        true,\n                        \"activation\",\n                        \"validate\",\n                    );\n                }\n\n                return generateError(\"NO_OF_TRIES_EXCEEDED\", 202);\n            }\n            const activationCodeData = {\n                activation_code: getRandomNumber(),\n                activation_code_generated_on: new Date(),\n                suid: dbUser[0].suid,\n                email: dbUser[0].email,\n            };\n            return _insertActivationCode(activationCodeData, true, \"activation\", \"validate\");\n        }\n        const existingCodeData = await runRawQuery(\n            `SELECT * from ${tableNames.SEC_USER_CODES} WHERE user_id = ${dbUser[0].suid} AND otp_code IS NOT NULL ORDER BY code_id DESC`,\n        );\n\n        if (existingCodeData.length) {\n            const codeGeneratedDate = new Date(existingCodeData[0].otp_code_generated_on);\n            codeGeneratedDate.setMinutes(codeGeneratedDate.getMinutes() + randomNumber.minutes);\n\n            if (existingCodeData[0].no_of_mobile_tries < 3) {\n                return _updateOtpCode(existingCodeData[0], dbUser[0].contact_no_primary);\n            }\n            if (new Date() > codeGeneratedDate) {\n                await _sendOtpCode(dbUser[0].suid, dbUser[0].contact_no_primary);\n                return {\n                    message: \"ACTIVATION_CODE_SENT\",\n                };\n            }\n\n            return generateError(\"NO_OF_TRIES_EXCEEDED\", 202);\n        }\n        await _sendOtpCode(dbUser[0].suid, dbUser[0].contact_no_primary);\n        return {\n            message: \"ACTIVATION_CODE_SENT\",\n        };\n    }\n    return generateError(\"USER_NOT_EXISTS\", 404);\n};\n\nexport const _forgotPassword = async (data) => {\n    const { email } = data;\n\n    const dbUser = await getRecordByParams(\n        tableNames.SEC_USERS,\n        { email },\n        \"\",\n        \"suid, email, is_active, role_id, is_approved, can_login\",\n    );\n\n    if (dbUser.length) {\n        if (dbUser[0].is_active === userStatus.ACTIVE) {\n            if (\n                dbUser[0].role_id === userRole.DOCTOR &&\n                dbUser[0].is_approved === userStatus.IN_ACTIVE\n            )\n                return generateError(\"ADMIN_APPROVAL_REQUIRED\", 202);\n\n            const activationCodeData = {\n                activation_code: getRandomNumber(),\n                activation_code_generated_on: new Date(),\n                suid: dbUser[0].suid,\n                email: dbUser[0].email,\n            };\n\n            return await _insertActivationCode(\n                activationCodeData,\n                true,\n                \"password reset\",\n                \"reset your password\",\n            );\n        }\n        return generateError(\"EMAIL_NOT_VERIFIED\", 202);\n    }\n    return generateError(\"USER_NOT_EXISTS\", 404);\n};\n\nexport const _changePassword = async (data) => {\n    const { email, activation_code, new_password } = data;\n\n    const dbUser = await getRecordByParams(\n        tableNames.SEC_USERS,\n        { email },\n        \"\",\n        \"suid, email, is_active, role_id, is_approved, can_login\",\n    );\n\n    if (dbUser.length) {\n        const codeParams = {\n            user_id: dbUser[0].suid,\n            activation_code,\n        };\n        const isValidActivationCode = await getRecordByParams(\n            tableNames.SEC_USER_CODES,\n            codeParams,\n            \"AND\",\n            \"*\",\n            \"desc\",\n            \"code_id\",\n        );\n\n        const codeGeneratedDate = new Date(isValidActivationCode[0].activation_code_generated_on);\n        codeGeneratedDate.setMinutes(codeGeneratedDate.getMinutes() + randomNumber.minutes);\n\n        if (codeGeneratedDate >= new Date()) {\n            if (\n                activation_code.toString() ===\n                    isValidActivationCode[0].activation_code.toString() &&\n                isValidActivationCode[0].is_expired === userStatus.ACTIVE\n            ) {\n                const records = {\n                    password: hashString(new_password || \"\"),\n                };\n\n                const whereClause = {\n                    suid: dbUser[0].suid,\n                    email,\n                };\n\n                await updateRecord(tableNames.SEC_USERS, records, whereClause, \"AND\");\n\n                return {\n                    message: \"PASSWORD_CHANGE_SUCCESS\",\n                };\n            }\n            return generateError(\"INVALID_ACTIVATION_CODE\", 404);\n        }\n        return generateError(\"ACTIVATION_CODE_EXPIRED\", 404);\n    }\n    return generateError(\"USER_NOT_EXISTS\", 404);\n};\n/** Helper functions */\n\nexport const _insertAccessToken = async (user, remember_me = false) => {\n    const userToken = await generateJWT(user.suid, remember_me);\n\n    if (user) {\n        const records = {\n            last_login: new Date(),\n            access_token: userToken,\n            access_token_generated_on: new Date(),\n            access_token_expires_on: addHoursToDate(\n                new Date(),\n                remember_me ? expirationTime.remember.hours : expirationTime.normal.hours,\n            ),\n        };\n\n        const whereClause = {\n            suid: user.suid,\n            email: user.email,\n        };\n\n        const updatedRecords = await updateRecord(\n            tableNames.SEC_USERS,\n            records,\n            whereClause,\n            \"AND\",\n        );\n\n        if (updatedRecords) {\n            return records;\n        }\n        return generateError(\"TOKEN_INSERTION_FAILED\", 400);\n    }\n    return generateError(\"USER_NOT_EXISTS\", 404);\n};\n\nexport const _insertActivationCode = async (\n    userData,\n    isRegenerate,\n    sub = \"account activation\",\n    message = \"activate your account\",\n) => {\n    const updatRecords = {\n        is_expired: userStatus.IN_ACTIVE,\n    };\n\n    const whereClause = {\n        user_id: userData.suid,\n    };\n\n    await updateRecord(tableNames.SEC_USER_CODES, updatRecords, whereClause, \"\");\n\n    const records = {\n        activation_code: userData.activation_code,\n        activation_code_generated_on: userData.activation_code_generated_on,\n        user_id: userData.suid,\n    };\n\n    await createRecord(tableNames.SEC_USER_CODES, [records]);\n    await sendActivationCode(userData.email, userData.activation_code, sub, message);\n    console.log(\"Activation code sent successfully to \", userData.email);\n    if (!isRegenerate) return generateError(\"EMAIL_NOT_VERIFIED\", 202);\n    return {\n        message: \"ACTIVATION_CODE_SENT\",\n    };\n};\n\nexport const _updateActivationCode = async (existingCodeData, user_id, email) => {\n    const activation_code = getRandomNumber();\n    const activationCodeData = {\n        activation_code,\n        activation_code_generated_on: new Date(),\n        no_of_email_tries: existingCodeData.no_of_email_tries + 1,\n    };\n\n    const updateWhereClause = {\n        user_id,\n        code_id: existingCodeData.code_id,\n    };\n\n    await updateRecord(tableNames.SEC_USER_CODES, activationCodeData, updateWhereClause, \"AND\");\n\n    await sendActivationCode(email, activation_code, \"activation\", \"validate\");\n    console.log(\"Activation code sent successfully to \", email);\n\n    return {\n        message: \"ACTIVATION_CODE_SENT\",\n    };\n};\n\nexport const _sendOtpCode = async (user_id, mobile) => {\n    const updatRecords = {\n        is_expired: userStatus.IN_ACTIVE,\n    };\n\n    const whereClause = {\n        user_id,\n    };\n\n    await updateRecord(tableNames.SEC_USER_CODES, updatRecords, whereClause, \"\");\n\n    const otpCode = getOTP();\n\n    const message = `Your OTP is ${otpCode} and it is valid for ${randomNumber.minutes} minutes. Please do not share it with anyone.`;\n\n    const records = {\n        otp_code: otpCode,\n        otp_code_generated_on: new Date(),\n        user_id,\n    };\n\n    await createRecord(tableNames.SEC_USER_CODES, [records]);\n\n    await sendOTPToUser(mobile, message);\n};\n\nexport const _updateOtpCode = async (existingCodeData, mobile) => {\n    const otpCode = getOTP();\n\n    const message = `Your OTP is ${otpCode} and it is valid for ${randomNumber.minutes} minutes. Please do not share it with anyone.`;\n\n    const activationCodeData = {\n        otp_code: otpCode,\n        otp_code_generated_on: new Date(),\n        no_of_mobile_tries: existingCodeData.no_of_mobile_tries + 1,\n    };\n\n    const updateWhereClause = {\n        user_id: existingCodeData.user_id,\n        code_id: existingCodeData.code_id,\n    };\n\n    await updateRecord(tableNames.SEC_USER_CODES, activationCodeData, updateWhereClause, \"AND\");\n\n    await sendOTPToUser(mobile, message);\n\n    return {\n        message: \"ACTIVATION_CODE_SENT\",\n    };\n};\n","\"strict mode\";\n\nexport const randomNumber = {\n    length: 6,\n    containers: \"7028361495\",\n    minutes: 20,\n};\n\nexport const OTP = {\n    length: 6,\n    containers: \"D01U2JKQZMNO56RST789LAB4CFGE3HIPVWXY\",\n};\n\nexport const thumbnail = {\n    width: 250,\n    height: 250,\n    imgFormat: \"png\",\n};\n\nexport const SMSmessages = {\n    activation_code_message: \"Your Shareecare verification Code is {0}. #ShareECare\",\n};\n\nexport const aws = {\n    s3: {\n        params: {\n            Bucket: \"{0}.shareecare.documents\",\n            Domain: \"{0}.documents.shareecare.com\",\n        },\n    },\n    settings: {\n        root_path: \"user_documents/{0}\", // {0} UserId\n        feedback_path: \"user_feedbacks/{0}\", // {0} UserId\n        image_path: \"/images\",\n        file_path: \"/files\",\n    },\n};\n\nexport const app = {\n    jwtSecret: process.env.JWT_SECRET,\n};\n\nexport const envMapping = {\n    development: \"dev\",\n    production: \"prod\",\n    test: \"test\",\n};\n\nexport const totalFilesSize = 20480;\n","export const result = {\n    SUCCESS: 0, // Success for all response if successful\n\n    /** * 1 to 50 User related error codes ** */\n    EMAIL_EXISTS: 1, // Email already exists\n    MOBILE_EXISTS: 2, // Mobile already exists\n    USER_NOT_EXISTS: 3, // User not exists\n    USER_EXISTS: 4, // User exists\n    USER_PASSWORD_INCORRECT: 5, // Password is wrong\n    REGISTRATION_NOT_CONFIRMED: 6, // user Email is not conformed\n    ACTIVATION_CODE_EXPIRED: 7,\n    ACTIVATION_CODE_MISMATCH: 8,\n    ALREADY_ACTIVE_MEMBER: 9,\n    VALUE_NULL: 10,\n\n    /** Document related service ** */\n    DOCUMENT_N0T_EXISTS: 15,\n\n    /** Firebase push notification service ** */\n    FIREBASE_NOTIFICATION_ERROR: 20,\n\n    /** * 351 t0 400 Google Api related error codes ** */\n    ZERO_RESULTS: 351,\n    OVER_QUERY_LIMIT: 352,\n    REQUEST_DENIED: 353,\n    INVALID_REQUEST: 354,\n    UNKNOWN_ERROR: 355,\n\n    /** * Response Types ** */\n    OK: 200,\n    BAD: 400,\n    DENIED: 401,\n    FORBIDDEN: 403,\n    SERVER_ERROR: 500,\n};\n\nexport const notificationType = {\n    BROADCAST: 1,\n    UNICAST: 2,\n};\n\nexport const userRole = {\n    SUPER_ADMIN: 1,\n    ADMIN: 2,\n    DOCTOR: 3,\n    HCF: 4,\n    PATIENT: 5,\n};\n\nexport const userStatus = {\n    ACTIVE: 0,\n    IN_ACTIVE: 1,\n    DELETED: 2,\n    TRUNK: 3,\n};\n\nexport const isPublished = {\n    PUBLISHED: 0,\n    UNPUBLISHED: 1,\n};\n\nexport const isCompleted = {\n    COMPLETED: 0,\n    NOT_COMPLETED: 1,\n};\n\nexport const mailType = {\n    welcome: 0,\n    resetPassword: 1,\n    error: 999,\n};\n\nexport const notificationStatus = {\n    unRead: 1,\n    read: 2,\n};\n\nexport const isSent = {\n    sent: 0,\n    notSent: 1,\n};\n\nexport const registration_type = {\n    EMAIL: 1,\n    SSO: 2,\n};\n\nexport const registration_from = {\n    WEB: 1,\n    APP: 2,\n};\n\nexport const expirationTime = {\n    normal: {\n        hours: 8,\n        minutes: 2,\n        seconds: 120,\n        unit: \"h\",\n    },\n    remember: {\n        hours: 12,\n        minutes: 12 * 60 * 60,\n        seconds: 60,\n        unit: \"h\",\n    },\n};\n","#!/usr/bin/env node\n/* eslint-disable no-useless-escape */\n\n\"strict mode\";\n\nimport jwt from \"jsonwebtoken\";\nimport https from \"https\";\nimport fs from \"fs\";\n\nimport crypto from \"crypto\";\nimport { expirationTime } from \"./sec-types\";\nimport { randomNumber, OTP, app } from \"./common\";\n\nconst cryptoAlgorithm = \"aes-256-ctr\"; // Do not alter\nconst cryptoPassword = Buffer.from(process.env.CRYPTO_PASSWORD, \"base64\"); // Do not alter\nconst IV_LENGTH = 16;\n\nconst randomStringLength = randomNumber.length;\nconst chars = randomNumber.containers;\n\nconst OTPlength = OTP.length;\nconst OTPchars = OTP.containers;\n\n/**\n * Generates a random number of specified length using the specified characters\n * @returns {string} - The generated random number\n */\nexport const getRandomNumber = () => {\n    let result = \"\";\n    for (let i = randomStringLength; i > 0; --i)\n        result += chars[Math.round(Math.random() * (chars.length - 1))];\n    return result;\n};\n\n/**\n * Generates a one-time password (OTP) of specified length using the specified characters\n * @returns {string} - The generated OTP\n */\nexport const getOTP = () => {\n    let result = \"\";\n    for (let i = OTPlength; i > 0; --i)\n        result += OTPchars[Math.round(Math.random() * (OTPchars.length - 1))];\n    return result;\n};\n\n/**\n * Encrypts a password using AES-256-CTR encryption\n * @param {string} password - The password to be encrypted\n * @returns {string} - The encrypted password, prefixed by the initialization vector used in encryption\n */\nexport const hashString = (password) => {\n    const iv = crypto.randomBytes(IV_LENGTH);\n    const cipher = crypto.createCipheriv(cryptoAlgorithm, Buffer.from(cryptoPassword), iv);\n    const encrypted = cipher.update(password);\n    const finalBuffer = Buffer.concat([encrypted, cipher.final()]);\n    return `${iv.toString(\"hex\")}:${finalBuffer.toString(\"hex\")}`;\n};\n\n/**\n * Decrypts an encrypted password using AES-256-CTR encryption\n * @param {string} password - The encrypted password, prefixed by the initialization vector used in encryption\n * @returns {string} - The decrypted password\n */\nexport const descryptHashString = (password) => {\n    const textParts = password.split(\":\");\n    const iv = Buffer.from(textParts.shift(), \"hex\");\n    const encryptedText = Buffer.from(textParts.join(\":\"), \"hex\");\n    const decipher = crypto.createDecipheriv(cryptoAlgorithm, Buffer.from(cryptoPassword), iv);\n    let decrypted = decipher.update(encryptedText);\n    decrypted = Buffer.concat([decrypted, decipher.final()]);\n    return decrypted.toString();\n};\n\n/**\n * Generates a JSON web token (JWT) for the specified user ID\n * @param {string} user_id - The user ID for which the JWT is to be generated\n * @param {boolean} remember_me - Whether or not to generate a long-lived JWT for \"remember me\" functionality\n * @returns {Promise<string>} - A Promise that resolves to the generated JWT\n */\nexport const generateJWT = async (user_id, remember_me) => {\n    return await jwt.sign({ user_id }, app.jwtSecret, {\n        expiresIn: remember_me\n            ? `${expirationTime.remember.hours}${expirationTime.normal.unit}`\n            : `${expirationTime.normal.hours}${expirationTime.normal.unit}`,\n    });\n};\n\n/**\n * Decodes a JWT and returns the user ID it contains\n * @param {string} token - The JWT to be decoded\n * @returns {Promise<string>} - A Promise that resolves to the user ID contained in the JWT\n */\nexport const decodeJWT = async (token) => {\n    try {\n        const decoded = await jwt.verify(token, app.jwtSecret);\n        return decoded.user_id;\n    } catch (err) {\n        throw err;\n    }\n};\n\n/**\n * Adds the specified number of hours to a given date\n * @param {Date} date - The date to which hours are to be added\n * @param {number} hours - The number of hours to add to the date\n * @returns {Date} - The resulting date\n */\nexport const addHoursToDate = (date, hours) => {\n    return new Date(new Date(date).setHours(date.getHours() + hours));\n};\n\n/**\n * Adds the specified number of minutes to a given date\n * @param {Date} date - The date to which minutes are to be added\n * @param {number} minutes - The number of minutes to add to the date\n * @returns {Date} - The resulting date\n */\nexport const addMinutesToDate = (date, minutes) => {\n    return new Date(new Date(date).setMinutes(date.getMinutes() + minutes));\n};\n\n/**\n * Gets the filename and extension from a given path/filename string\n * @param {string} pathfilename - The path/filename string from which to extract the filename and extension\n * @returns {string[]} - An array containing the filename and extension, respectively\n */\nexport const getFilenameAndExtension = (pathfilename) => {\n    const filenameextension = pathfilename.replace(/^.*[\\\\\\/]/, \"\");\n    const filename = filenameextension.substring(0, filenameextension.lastIndexOf(\".\"));\n    const ext = filenameextension.split(\".\").pop();\n\n    return [filename, ext];\n};\n\n/**\n * Groups an array of objects by the specified key\n * @param {Object[]} arr - The array of objects to be grouped\n * @param {string} key - The key by which to group the objects\n * @returns {Object} - An object containing the groups of objects, with keys corresponding to the grouping key values\n */\nexport const groupBy = (arr, key) => {\n    const initialValue = {};\n    return arr.reduce((acc, cval) => {\n        const myAttribute = cval[key];\n        acc[myAttribute] = [...(acc[myAttribute] || []), cval];\n        return acc;\n    }, initialValue);\n};\n\n/**\n * Creates a success response object for use in AWS Lambda functions\n * @param {Object|string} body - The body of the response object; can be an object or a string\n * @param {number} statusCode - The HTTP status code of the response\n * @returns {Object} - The response object, including headers necessary for CORS and content type\n */\nexport const createSuccessResponse = (body, statusCode) => {\n    const bodyString = typeof body === \"object\" ? JSON.stringify(body) : body;\n    return {\n        statusCode,\n        body: bodyString,\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Content-Type\": \"application/json \",\n        },\n    };\n};\n\n/**\n * Creates an error response object with a given message and status code\n *\n * @param {string} message - The error message\n * @param {number} statusCode - The HTTP status code\n * @returns {Object} - The error response object\n */\nexport const createErrorResponse = (body, statusCode) => {\n    const bodyString = typeof body === \"object\" ? JSON.stringify(body) : body;\n    return {\n        statusCode,\n        body: bodyString || \"Internal Server Error\",\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Content-Type\": \"application/json \",\n        },\n    };\n};\n\n/**\n * Converts a readable stream to a string\n *\n * @param {stream.Readable} stream - The stream to convert\n * @returns {Promise<string>} - A promise that resolves to the stream content as a string\n */\nexport const streamToString = (stream) =>\n    new Promise((resolve, reject) => {\n        const chunks = [];\n        stream.on(\"data\", (chunk) => chunks.push(chunk));\n        stream.on(\"error\", reject);\n        stream.on(\"end\", () => resolve(Buffer.concat(chunks).toString(\"utf8\")));\n    });\n\n/**\n * Parses cookies from a given request object\n *\n * @param {Object} request - The request object\n * @returns {Object} - An object with the parsed cookies\n */\nexport const parseCookies = (request) => {\n    const list = {};\n    try {\n        const cookieHeader =\n            request.queryStringParameters && request.queryStringParameters.cookie\n                ? request.queryStringParameters.cookie.split(\";\")\n                : request.cookies\n                ? request.cookies\n                : request.headers.Cookie\n                ? request.headers.Cookie.split(\";\")\n                : request.headers.cookie\n                ? request.headers.cookie.split(\";\")\n                : request.headers.authorization\n                ? request.headers.authorization.split(\";\")\n                : request.headers.Authorization.split(\";\");\n\n        if (!cookieHeader) return list;\n\n        cookieHeader.forEach((cookie) => {\n            const [name, ...rest] = cookie.split(`=`);\n            const trimedName = name?.trim();\n            if (!trimedName) return;\n            const value = rest.join(`=`).trim();\n            if (!value) return;\n            list[trimedName] = decodeURIComponent(value);\n        });\n    } catch (err) {\n        console.log(\"Some error occured in parsing cookies\", err);\n    }\n\n    return list;\n};\n\n/**\n * Formats a date string to the format 'MM/DD/YYYY'\n *\n * @param {string} date - The date string to format\n * @returns {string} - The formatted date string\n */\nexport const formatDate = (date) => {\n    const newDate = new Date(date);\n    return `${newDate.getMonth() > 8 ? newDate.getMonth() + 1 : `0${newDate.getMonth() + 1}`}/${\n        newDate.getDate() > 9 ? newDate.getDate() : `0${newDate.getDate()}`\n    }/${newDate.getFullYear()}`;\n};\n\n/**\n * Creates a directory at the given path\n *\n * @param {string} path - The path of the directory to create\n * @returns {Promise<void>} - A promise that resolves when the directory is created\n */\nexport const createDirectory = async (path) => {\n    try {\n        if (!fs.existsSync(path)) {\n            fs.mkdirSync(path);\n        }\n    } catch (err) {\n        console.log(\"Error occured in creating directory\", err);\n    }\n};\n\n/**\n * Downloads a file from the given URL and saves it to the given file path\n *\n * @param {string} url - The URL of the file to download\n * @param {string} filePath - The path of the file to save to\n * @returns {Promise<void>} - A promise that resolves when the file is downloaded\n */\nexport const downloadFile = async (url, filePath) => {\n    return await new Promise((resolve, reject) => {\n        console.log(\"Downloading file from \", url, \"to\", filePath);\n        https\n            .get(url, (response) => {\n                const code = response.statusCode ? response.statusCode : 0;\n\n                if (code >= 400) {\n                    return reject(new Error(response.statusMessage));\n                }\n\n                // handle redirects\n                if (code > 300 && code < 400 && !!response.headers.location) {\n                    return downloadFile(response.headers.location, filePath);\n                }\n\n                // save the file to disk\n                const fileWriter = fs.createWriteStream(filePath).on(\"finish\", () => {\n                    console.log(\"Download Completed!\");\n                    resolve({});\n                });\n\n                response.pipe(fileWriter);\n                return \"File written\";\n            })\n            .on(\"error\", (error) => {\n                console.log(\"Error occured in downloading file\", error);\n                reject(error);\n            });\n    });\n};\n\n/**\n * Returns the top-level domain of a given URL without any subdomains.\n * @param {string} domain - The full domain to extract the top-level domain from.\n * @returns {string} - The top-level domain of the given domain without any subdomains.\n * @throws {Error} - Throws an error if the domain cannot be processed.\n */\nexport const getDomainWithoutSubdomain = (domain) => {\n    try {\n        const domainCharacters = domain.split(\"\").reverse();\n        let domainReversed = \"\";\n        let dotCount = 0;\n\n        do {\n            if (domainCharacters[0] === \".\") {\n                dotCount++;\n                if (dotCount === 2) break;\n            }\n            domainReversed += domainCharacters[0];\n            domainCharacters.splice(0, 1);\n        } while (dotCount < 2 && domainCharacters.length > 0);\n\n        return domainReversed.split(\"\").reverse().join(\"\");\n    } catch (err) {\n        console.log(\"Error occured while getting domain without sub domain\", err);\n        throw err;\n    }\n};\n\n/**\n * Returns the size of a file in bytes given the file's path.\n * @param {string} filename - The path to the file to get the size of.\n * @returns {number} - The size of the file in bytes.\n */\nexport const getFilesizeInBytes = (filename) => {\n    const stats = fs.statSync(filename);\n    return stats.size;\n};\n\n/**\n * Returns the start and end dates of a specified period based on a given date.\n * @param {string} periodType - The type of period to get (\"day\", \"month\", \"months\", or \"year\").\n * @param {string[]} date - The date to calculate the period start and end from.\n * @param {number} value - The number of months to subtract when the periodType is \"months\".\n * @returns {Date[]} - An array containing the start and end dates of the specified period.\n * @throws {Error} - Throws an error if the periodType is not one of the specified types.\n */\nexport const getPeriodStartEnd = (periodType, date, value) => {\n    if (periodType === \"date_range\") return [new Date(date[0]), new Date(date[1])];\n\n    const startDate = new Date(date[0]);\n    const endDate = new Date(date[0]);\n\n    if (periodType === \"day\") {\n        startDate.setHours(0, 0, 0, 0);\n        endDate.setHours(23, 59, 59, 999);\n    } else if (periodType === \"month\") {\n        startDate.setDate(1);\n        endDate.setMonth(endDate.getMonth() + 1);\n        endDate.setDate(0);\n        endDate.setHours(23, 59, 59, 999);\n    } else if (periodType === \"months\") {\n        startDate.setMonth(startDate.getMonth() - value);\n        startDate.setDate(0);\n        endDate.setMonth(endDate.getMonth() + 1);\n        endDate.setDate(0);\n        endDate.setHours(23, 59, 59, 999);\n    } else if (periodType === \"year\") {\n        startDate.setFullYear(startDate.getFullYear() - 1);\n        startDate.setMonth(startDate.getMonth());\n        endDate.setMonth(startDate.getMonth());\n        endDate.setHours(23, 59, 59, 999);\n    } else {\n        throw new Error(stringifyError({ message: \"Invalid period type\", code: 400 }));\n    }\n\n    return [startDate, endDate];\n};\n\nexport const parseEventBody = (parseBody) => {\n    if (parseBody) {\n        return JSON.parse(parseBody);\n    }\n    return parseBody;\n};\n\nexport const stringifyError = (errObj) => {\n    try {\n        return JSON.stringify(errObj);\n    } catch (err) {\n        return errObj;\n    }\n};\n\nexport const parseError = (errObj) => {\n    try {\n        return JSON.parse(errObj);\n    } catch (err) {\n        return errObj;\n    }\n};\n\nexport const generateError = (message, code) => {\n    throw new Error(stringifyError({ message, code }));\n};\n","/* eslint-disable prettier/prettier */\nimport { initConnection } from \".\";\n\nasync function queryDatabase(query, params) {\n    const conn = await initConnection();\n    try {\n        if (params) {\n            const rows = await conn.query(query, params);\n            return rows;\n        }\n        const rows = await conn.query(query);\n        return rows;\n    } catch (err) {\n        console.error(err);\n        throw err;\n    } finally {\n        if (conn) conn.end();\n    }\n}\n\nexport async function createRecord(table, records, getResults, column) {\n    const columns = Object.keys(records[0]).toString();\n    const values = records.map((record) => Object.values(record));\n    const query = `INSERT INTO ${table} (${columns}) VALUES ?`;\n    const insertResult = await queryDatabase(query, [values]);\n    const { insertId } = insertResult;\n\n    if (getResults) {\n        const selectQuery = `SELECT * FROM ${table} WHERE ${column} = ?`;\n        const selectResult = await queryDatabase(selectQuery, [insertId]);\n        return selectResult[0];\n    }\n    return insertId;\n}\n\nexport async function updateRecord(table, record, whereColumns, joinParams) {\n    const columns = Object.keys(record)\n        .map((ele) => `${ele} = ?`)\n        .toString();\n    const whereClause = Object.keys(whereColumns)\n        .map((key) => `${key} = ?`)\n        .join(` ${joinParams} `);\n    const params = [...Object.values(record), ...Object.values(whereColumns)];\n    const query = `UPDATE ${table} SET ${columns} WHERE ${whereClause}`;\n    return await queryDatabase(query, params);\n}\n\nexport async function getAllRecords(table) {\n    const query = `SELECT * FROM ${table}`;\n    return await queryDatabase(query);\n}\n\nexport async function getRecordByParams(\n    table,\n    whereColumns,\n    joinParams,\n    selectParams = \"*\",\n    order = \"desc\",\n    orderBy = \"suid\",\n) {\n    const whereClause = Object.keys(whereColumns)\n        .map((key) => `${key} = ?`)\n        .join(` ${joinParams} `);\n    const query = `SELECT ${selectParams} FROM ${table} WHERE ${whereClause} order by ${orderBy} ${order}`;\n    return await queryDatabase(query, [...Object.values(whereColumns)]);\n}\n\nexport async function deleteRecord(table, whereColumns) {\n    const whereClause = Object.keys(whereColumns)\n        .map((key) => `${key} = ?`)\n        .join(\" AND \");\n    const query = `DELETE FROM ${table} WHERE ${whereClause}`;\n    return await queryDatabase(query, [...Object.values(whereColumns)]);\n}\n\n// export async function runRawQuery(table, alias1, alias2) {\n//     const joinCondition = `${alias1.column1} = ${alias2.column2}`;\n//    const query = `SELECT * FROM ${table}${alias1} JOIN ${table}${alias2} ON ${joinCondition} `;\nexport async function runRawQuery(table1, table2, table3, column1, column2, column3, column4) {\n    const query = `SELECT * FROM ${table1} JOIN ${table2} ON ${table1}.${column1} = ${table2}.${column2} JOIN ${table3} ON  ${table2}.${column3} =  ${table3}.${column4} `;\n    return await queryDatabase(query);\n}\n\nexport async function completeDoctorsDetails(table) {\n    const query = `SELECT * FROM ${table}`;\n    return await queryDatabase(query);\n}\n\nexport async function completeDoctorsDetailsId(table, column, id) {\n    // const query = `SELECT * FROM ${table} WHERE  ${table}.doctor_details_id = ?;`;\n    const query = ` SELECT *\n    FROM sec_users\n    JOIN sec_doctors_details ON sec_users.suid = sec_doctors_details.doctor_id\n    JOIN sec_departments ON sec_doctors_details.speciality_id = sec_departments.department_id\n    WHERE sec_users.role_id = '3' AND sec_doctors_details.doctor_details_id = ?; `;\n    return await queryDatabase(query, [id]);\n}\n\nexport async function appointmentQuery(table) {\n    const query = `SELECT * FROM ${table}`;\n    return await queryDatabase(query);\n}\n\n\n\nexport async function completeappointmentQuery(table) {\n    const query = `SELECT * FROM ${table}`;\n    return await queryDatabase(query);\n}\n\n\n\n\n\n// -----------------------------------------  Doctor API -------------------------------------------------------\n\nexport async function DocDashboardAppQuery(table, doc_id) {\n    const query = `SELECT * FROM ${table} WHERE ${table}.doctor_id = ${doc_id}`;\n    return await queryDatabase(query);\n}\n\n\nexport async function DocDashoardAppstatusQuery(table, app_status, app_id) { \n    const query = `SELECT * FROM ${table} WHERE ${table}.status = '${app_status}' AND ${table}.doctor_id = ${app_id}`;\n    return await queryDatabase(query);\n}\n\nexport async function DocNotificationQuery(table, app_id) { \n    const query = `SELECT * FROM ${table} WHERE ${table}.doctor_id = ${app_id}`;\n    return await queryDatabase(query);\n}\n\n\nexport async function docAppointmentdetailsQuerybyId(table, app_id) {\n    const query = `SELECT * FROM ${table} WHERE ${table}.doctor_id = ${app_id}`;\n    return await queryDatabase(query);\n}\n\nexport async function docAppointmentQuerybystatusId(table, app_status, app_id) { \n    const query = `SELECT * FROM ${table} WHERE ${table}.status = '${app_status}' AND ${table}.doctor_id = ${app_id}`;\n    return await queryDatabase(query);\n}\n\n\nexport async function getDocAppStatusRecord(\n    table,\n    whereColumns,\n    joinParams,\n    selectParams = \"*\",\n    order = \"desc\",\n    orderBy = \"appointment_id\",\n) {\n    const whereClause = Object.keys(whereColumns)\n        .map((key) => `${key} = ?`)\n        .join(` ${joinParams} `);\n    const query = `SELECT ${selectParams} FROM ${table} WHERE ${whereClause} order by ${orderBy} ${order}`;\n    return await queryDatabase(query, [...Object.values(whereColumns)]);\n}\n\nexport async function getDocListingRecord(\n    table,\n    whereColumns,\n    joinParams,\n    selectParams = \"*\",\n    order = \"desc\",\n    orderBy = \"doctor_id\",\n) {\n    const whereClause = Object.keys(whereColumns)\n        .map((key) => `${key} = ?`)\n        .join(` ${joinParams} `);\n    const query = `SELECT ${selectParams} FROM ${table} WHERE ${whereClause} order by ${orderBy} ${order}`;\n    return await queryDatabase(query, [...Object.values(whereColumns)]);\n}\n\n\n\nexport async function getDocAppRecord(\n    table,\n    whereColumns,\n    joinParams,\n    selectParams = \"*\",\n    order = \"desc\",\n    orderBy = \"doctor_id\",\n) {\n    const whereClause = Object.keys(whereColumns)\n        .map((key) => `${key} = ?`)\n        .join(` ${joinParams} `);\n    const query = `SELECT ${selectParams} FROM ${table} WHERE ${whereClause} order by ${orderBy} ${order}`;\n    return await queryDatabase(query, [...Object.values(whereColumns)]);\n}\n\nexport async function doctordetailsQueryId(table1, table2, table3, column1, column2, column3, column4, column5, id) {\n    // const query = `SELECT * FROM  ${table2} WHERE   ${table2}.doctor_id =  ${id} ;`;\n    const query = ` SELECT *  FROM ${table1} JOIN ${table2} ON ${table1}.${column1} = ${table2}.${column2} JOIN ${table3} ON  ${table2}.${column3} =  ${table3}.${column4}\n    WHERE ${table1}.role_id = '3' AND ${table2}.doctor_id = ${id} `;\n  \n    return await queryDatabase(query, [id]);\n}\n\n\nexport async function getDocDetailRecord(\n    table,\n    whereColumns,\n    joinParams,\n    selectParams = \"*\",\n    order = \"desc\",\n    orderBy = \"doctor_id\",\n) {\n    const whereClause = Object.keys(whereColumns)\n        .map((key) => `${key} = ?`)\n        .join(` ${joinParams} `);\n    const query = `SELECT ${selectParams} FROM ${table} WHERE ${whereClause} order by ${orderBy} ${order}`;\n    return await queryDatabase(query, [...Object.values(whereColumns)]);\n}\n\n\n\n// export async function getDocListingRecord(\n//     table,\n//     whereColumns,\n//     joinParams,\n//     selectParams = \"*\",\n//     order = \"desc\",\n//     orderBy = \"doctor_id\",\n// ) {\n//     const whereClause = Object.keys(whereColumns)\n//         .map((key) => `${key} = ?`)\n//         .join(` ${joinParams} `);\n//     const query = `SELECT ${selectParams} FROM ${table} WHERE ${whereClause} order by ${orderBy} ${order}`;\n//     return await queryDatabase(query, [...Object.values(whereColumns)]);\n// }\n\n\nexport async function DocAppointmentHistory(table, app_id) {\n    // const query = `SELECT * FROM ${table} WHERE ${table}.status = ${app_status}`;\n    const query = `SELECT * FROM ${table} WHERE ${table}.doctor_id = ${app_id}`;\n    return await queryDatabase(query);\n}\n\n\nexport async function DoctransactionQuery(table, doc_id) {\n    // const query = `SELECT * FROM ${table} WHERE ${table}.status = ${app_status}`;\n    const query = `SELECT * FROM ${table} WHERE ${table}.user_id = ${doc_id}`;\n    return await queryDatabase(query);\n}\n// export async function getDocListingRecord(\n//     table,\n//     whereColumns,\n//     joinParams,\n//     selectParams = \"*\",\n//     order = \"desc\",\n//     orderBy = \"doctor_id\",\n// ) {\n//     const whereClause = Object.keys(whereColumns)\n//         .map((key) => `${key} = ?`)\n//         .join(` ${joinParams} `);\n//     const query = `SELECT ${selectParams} FROM ${table} WHERE ${whereClause} order by ${orderBy} ${order}`;\n//     return await queryDatabase(query, [...Object.values(whereColumns)]);\n// }\n\n\n// -----------------------------------------------------------Patient -------------------------------------------\n// Patient Dashboard All Doctors details\nexport async function dashboarddocdetailsQuery(table1, table2, table3, column1, column2, column3, column4) {\n    const query = `SELECT * FROM ${table1} JOIN ${table2} ON ${table1}.${column1} = ${table2}.${column2} JOIN ${table3} ON  ${table2}.${column3} =  ${table3}.${column4} \n    WHERE ${table1}.role_id = '3'`;\n    return await queryDatabase(query);\n}\n\n// Patient Dashboard Single Doctors details \nexport async function dashboarddocdetailsQueryId(table1, table2, table3, column1, column2, column3, column4, doc_id) {\n    const query = `SELECT * FROM ${table1} JOIN ${table2} ON ${table1}.${column1} = ${table2}.${column2} JOIN ${table3} ON  ${table2}.${column3} =  ${table3}.${column4} \n    WHERE ${table1}.role_id = '3' AND ${table2}.doctor_id = ${doc_id} `;\n    return await queryDatabase(query);\n}\n\n// Patient Dashboard All HCF details\nexport async function dashboardhcfdetailsQuery(table1, table2, column1, column2) {\n    const query = `SELECT * FROM ${table1} JOIN ${table2} ON ${table1}.${column1} = ${table2}.${column2}  \n    WHERE ${table1}.role_id = '4'`;\n    return await queryDatabase(query);\n}\n\n// Patient Dashboard Single HCF details \nexport async function dashboardhcfdetailsQueryId(table1, table2, column1, column2, hcf_id) {\n    const query = `SELECT * FROM ${table1} JOIN ${table2} ON ${table1}.${column1} = ${table2}.${column2}  \n    WHERE ${table1}.role_id = '4' AND ${table2}.hcf_id = ${hcf_id} `;\n    return await queryDatabase(query);\n}\n\n\nexport async function patientActivityQuery(table, app_id) {\n    // const query = `SELECT * FROM ${table} WHERE ${table}.status = ${app_status}`;\n    const query = `SELECT * FROM ${table} WHERE ${table}.patient_id = ${app_id}`;\n    return await queryDatabase(query);\n}\n\n\n\nexport async function patientNotificationQuery(table, app_id) {\n    // const query = `SELECT * FROM ${table} WHERE ${table}.status = ${app_status}`;\n    const query = `SELECT * FROM ${table} WHERE ${table}.patient_id = ${app_id}`;\n    return await queryDatabase(query);\n}\n\nexport async function patientappQuerybystatusid(table, app_status, app_id) {\n    // const query = `SELECT * FROM ${table} WHERE ${table}.status = ${app_status}`;\n    const query = `SELECT * FROM ${table} WHERE ${table}.status = '${app_status}' AND ${table}.patient_id = ${app_id}`;\n    return await queryDatabase(query);\n}\n\nexport async function appointmentHistoryQuery(table, app_id) {\n    // const query = `SELECT * FROM ${table} WHERE ${table}.status = ${app_status}`;\n    const query = `SELECT * FROM ${table} WHERE ${table}.patient_id = ${app_id}`;\n    return await queryDatabase(query);\n}\n\nexport async function patienttransactionQuery(table, user_id) {\n    // const query = `SELECT * FROM ${table} WHERE ${table}.status = ${app_status}`;\n    const query = `SELECT * FROM ${table} WHERE ${table}.user_id = ${user_id}`;\n    return await queryDatabase(query);\n}\nexport async function patientPlanQuery(table, pat_id) {\n    // const query = `SELECT * FROM ${table} WHERE ${table}.status = ${app_status}`;\n    const query = `SELECT * FROM ${table} WHERE ${table}.patient_id = ${pat_id}`;\n    return await queryDatabase(query);\n}\n","import mysql from \"serverless-mysql\";\n\nlet pool;\n\nexport const initConnection = async () => {\n    try {\n        if (!pool) {\n            console.log(\"connecting to database............\");\n            pool = mysql({\n                config: {\n                    host: process.env.DB_HOST,\n                    user: process.env.DB_USER,\n                    password: process.env.DB_PASSWORD,\n                    database: process.env.DB_DATABASE,\n                    waitForConnections: true,\n                    connectionLimit: process.env.CONNECTION_LIMIT, // maximum number of connections in the pool\n                    queueLimit: process.env.QUEUE_LIMIT, // maximum number of requests in the queue\n                },\n            });\n            console.log(\"connected to database\");\n            return pool;\n        }\n\n        console.log(\"using cached connection............\");\n        return pool;\n    } catch (err) {\n        console.log(\"Error occurred in database connection\", err);\n        throw err;\n    }\n};\n","export const tableNames = {\n    SEC_COUNTRIES: \"sec_countries\",\n    SEC_STATES: \"sec_states\",\n    SEC_CITIES: \"sec_cities\",\n    SEC_ROLES: \"sec_roles\",\n    SEC_DEPARTMENTS: \"sec_departments\",\n    SEC_USERS: \"sec_users\",\n    SEC_USER_CODES: \"sec_user_codes\",\n    SEC_PATIENT_PLANS: \"sec_patient_plans\",\n    SEC_DOCTORS_DETAILS: \"sec_doctors_details\",\n    VW_SEC_COMPLETE_DOCTOR_DETAILS: \"completedoctordetails\",\n    SEC_APPOINTMENTS: \"sec_appointments\",\n    SEC_TRANSACTIONS: \"sec_transactions\",\n    SEC_DOCTOR_LISTING: \"sec_doc_listing_details\",\n    SEC_HCF_DETAILS:\"sec_hcf_details\",\n\n};\n","import { SESClient, SendEmailCommand } from \"@aws-sdk/client-ses\";\nimport { SNSClient, PublishCommand } from \"@aws-sdk/client-sns\";\n\nconst config = { region: process.env.REGION };\n\nconst sesClient = new SESClient(config);\nconst snsClient = new SNSClient(config);\n\nexport const sendEmailToUser = async (sendTo, subject, body) => {\n    try {\n        const input = {\n            Source: process.env.FROM_EMAIL_ADDRESS, // required\n            Destination: {\n                ToAddresses: [sendTo],\n            },\n            Message: {\n                // Message\n                Subject: {\n                    Charset: \"UTF-8\",\n                    Data: subject,\n                },\n                Body: {\n                    Html: {\n                        Charset: \"UTF-8\",\n                        Data: body,\n                    },\n                },\n            },\n            ReplyToAddresses: [process.env.FROM_EMAIL_ADDRESS],\n        };\n        const command = new SendEmailCommand(input);\n        const response = await sesClient.send(command);\n        console.log(`Email has been sent to ${sendTo}`);\n        console.log(response);\n        return response;\n    } catch (err) {\n        console.log(\"Error occured in sending email to user due to\", err);\n        throw err;\n    }\n};\n\nexport const sendOTPToUser = async (phoneNumber, message) => {\n    const messageAttributes = {\n        \"SEC.SNS.SMS.SMSType\": { DataType: \"String\", StringValue: \"Transactional\" },\n        \"SEC.SNS.SMS.SenderID\": { DataType: \"String\", StringValue: \"SenderID\" },\n        \"SEC.SNS.SMS.MessageType\": { DataType: \"String\", StringValue: \"SMS\" },\n        \"SEC.SNS.SMS.OriginationNumber\": { DataType: \"String\", StringValue: \"OriginationNumber\" },\n    };\n\n    try {\n        const publishParams = {\n            Message: message,\n            MessageAttributes: messageAttributes,\n            PhoneNumber: phoneNumber,\n        };\n        const command = new PublishCommand(publishParams);\n        const response = await snsClient.send(command);\n        console.log(\"Message sent. Message ID:\", response.MessageId);\n        console.log(`OTP sent successfully to ${phoneNumber}`);\n        console.log(response);\n        return response;\n    } catch (err) {\n        console.log(\"Error occured in sending otp to user due to\", err);\n        console.error(`Failed to send OTP to ${phoneNumber}:`, err);\n        throw err;\n    }\n};\n","#!/usr/bin/env node\n\n\"strict mode\";\n\nclass ProfileImage {\n    constructor(initials, options = {}) {\n        this.initials = initials;\n        this.width = 100;\n        this.height = 100;\n        this.textColor = options.textColor || \"#ffffff\";\n        this.backgroundColor = options.backgroundColor;\n        this.fontFamily = options.fontFamily || \"sans-serif\";\n        this.fontSize = this.height / (this.initials.length * 0.5 + 1);\n        this.fontWeight = options.fontWeight || \"bold\";\n    }\n\n    png() {\n        // returns png as base64 string\n        /* eslint-disable global-require */\n        const { createCanvas } = require(\"canvas\");\n        const canvas = createCanvas(this.width, this.height);\n        const context = canvas.getContext(\"2d\");\n\n        const centerX = this.width / 2;\n        const centerY = this.height / 2;\n        const radius = this.height / 2;\n\n        context.beginPath();\n        context.arc(centerX, centerY, radius, 0, 2 * Math.PI, false);\n        context.fillStyle = `#${this.backgroundColor}`;\n        context.fill();\n\n        context.font = `${this.fontSize}px ${this.fontFamily}`;\n        context.textAlign = \"center\";\n        context.fillStyle = this.textColor;\n\n        // context.textBaseline = \"middle\";\n        context.fillText(\n            this.initials,\n            canvas.width / 2,\n            canvas.height / 2 + (this.fontSize * 0.68) / 2,\n        );\n        return canvas.toDataURL(\"image/png\");\n    }\n}\n\nexport const getRandomColor = async () => {\n    let color = \"\";\n    const possible = \"ABCDEFabcdef0123456789\";\n    for (let i = 0; i < 6; i++)\n        color += possible.charAt(Math.floor(Math.random() * possible.length));\n    return color;\n};\n\nexport const generateDummyProfileImg = async (name) => {\n    const color = await getRandomColor();\n    const text = name.slice(0, 2).toUpperCase();\n\n    const img = new ProfileImage(text, {\n        backgroundColor: color,\n    });\n\n    const src = img.png();\n\n    return src;\n};\n","\"strict mode\";\n\nimport { randomNumber } from \"../configs/common\";\nimport { sendEmailToUser } from \"./aws-helper\";\n\nexport const sendActivationCode = async (email, code, sub, action) => {\n    console.log(email, code, sub, action);\n    try {\n        const subject = `Share-e-care ${sub} code`;\n        const body = `<html> \\\n                        <head> \\\n                            <title>Welcome to Share-e-care</title> \\\n                        </head> \\\n                        <body> \\\n                            <div>Please use this code to ${action}. Your code is ${code} and will expire in ${randomNumber.minutes} minutes</div> \\\n                        </body> \\\n                        </html>`;\n\n        // await sendEmailToUser(email, subject, body);\n        console.log(\"Code has been sent to \", email);\n    } catch (err) {\n        console.log(\"Error occured in sending activation code due to\", err);\n        throw err;\n    }\n};\n","import { registration_type } from \"../../configs/sec-types\";\n\nexport const getUserModel = (data) => {\n    const newData = { ...data };\n    if (newData.token_id === undefined) {\n        newData.registration_type = registration_type.EMAIL;\n        newData.tokens = [];\n    } else {\n        newData.registration_type = registration_type.SSO;\n        newData.tokens = [\n            { token_id: newData.token_id, SSO_type: newData.registered_via, is_login: true },\n        ];\n    }\n\n    const userData = {\n        email: newData.email ? newData.email.trim() : newData.email,\n        first_name: newData.first_name ? newData.first_name.trim() : newData.first_name,\n        last_name: newData.last_name ? newData.last_name.trim() : newData.last_name,\n        middle_name: newData.middle_name ? newData.middle_name.trim() : newData.middle_name,\n        added_by: newData.added_by || \"\",\n        gender: newData.gender || \"\",\n        DOB: newData.DOB ? newData.DOB.trim() : newData.DOB,\n        country_id: newData.country_id,\n        state_id: newData.state_id,\n        city_id: newData.city_id,\n        street_address1: newData.street_address1,\n        street_address2: newData.street_address2,\n        zip_code: newData.zip_code,\n    };\n\n    return userData;\n};\n","module.exports = require(\"@aws-sdk/client-ses\");","module.exports = require(\"@aws-sdk/client-sns\");","module.exports = require(\"@babel/runtime/helpers/defineProperty\");","module.exports = require(\"canvas\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"serverless-mysql\");","module.exports = require(\"crypto\");","module.exports = require(\"fs\");","module.exports = require(\"https\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {\n    createSuccessResponse,\n    createErrorResponse,\n    parseEventBody,\n    parseError,\n} from \"../configs/utility\";\nimport { getUserModel } from \"../helpers/models/user-model\";\nimport {\n    _authenticateUser,\n    _updateProfile,\n    _registerUser,\n    _verifyEmail,\n    _verifyOtp,\n    _resendCode,\n    _forgotPassword,\n    _changePassword,\n} from \"./user-adapter\";\n\nexport const registerUser = async (event) => {\n    try {\n        const data = parseEventBody(event.body);\n        // console.log(data);\n        const user = await _registerUser(data);\n        console.log(user);\n        if (user) {\n            return createSuccessResponse({ response: user }, 200);\n        }\n        return createSuccessResponse({ response: \"USER_NOT_EXISTS\" }, 200);\n    } catch (err) {\n        console.log(\"Error in registerUser handler\", err, err.message);\n        const { message, code } = parseError(err.message);\n        return createErrorResponse({ error: message }, code || 500);\n    }\n};\n\nexport const verifyUserEmail = async (event) => {\n    try {\n        const data = parseEventBody(event.body);\n\n        const user = await _verifyEmail(data);\n\n        if (user) return createSuccessResponse({ response: user }, 200);\n\n        return createSuccessResponse({ response: \"USER_NOT_EXISTS\" }, 200);\n    } catch (err) {\n        console.log(\"Error in verifyUserEmail handler\", err, err.message);\n        const { message, code } = parseError(err.message);\n        return createErrorResponse({ error: message }, code || 500);\n    }\n};\n\nexport const updateProfile = async (event) => {\n    try {\n        const data = parseEventBody(event.body);\n        const userData = getUserModel(data);\n\n        const user = await _updateProfile(userData);\n\n        return createSuccessResponse({ response: user }, 200);\n    } catch (err) {\n        console.log(\"Error in updateProfile handler\", err, err.message);\n        const { message, code } = parseError(err.message);\n        return createErrorResponse({ error: message }, code || 500);\n    }\n};\n\nexport const authenticateUser = async (event) => {\n    try {\n        const data = parseEventBody(event.body);\n\n        const user = await _authenticateUser(data);\n\n        if (user) return createSuccessResponse({ response: user }, 200);\n\n        return createSuccessResponse({ response: \"USER_NOT_EXISTS\" }, 200);\n    } catch (err) {\n        console.log(\"Error in authenticateUser handler\", err, err.message);\n        const { message, code } = parseError(err.message);\n        return createErrorResponse({ error: message }, code || 500);\n    }\n};\n\nexport const verifyUserOtp = async (event) => {\n    try {\n        const data = parseEventBody(event.body);\n\n        const user = await _verifyOtp(data);\n\n        if (user) return createSuccessResponse({ response: user }, 200);\n\n        return createSuccessResponse({ response: \"USER_NOT_EXISTS\" }, 200);\n    } catch (err) {\n        console.log(\"Error in verifyUserOtp handler\", err, err.message);\n        const { message, code } = parseError(err.message);\n        return createErrorResponse({ error: message }, code || 500);\n    }\n};\n\nexport const resendCode = async (event) => {\n    try {\n        const data = parseEventBody(event.body);\n\n        const user = await _resendCode(data);\n\n        if (user) return createSuccessResponse({ response: user }, 200);\n\n        return createSuccessResponse({ response: \"USER_NOT_EXISTS\" }, 200);\n    } catch (err) {\n        console.log(\"Error in verifyUserOtp handler\", err, err.message);\n        const { message, code } = parseError(err.message);\n        return createErrorResponse({ error: message }, code || 500);\n    }\n};\n\nexport const forgotPassword = async (event) => {\n    try {\n        const data = parseEventBody(event.body);\n\n        const user = await _forgotPassword(data);\n        console.log(user);\n        if (user) return createSuccessResponse({ response: user }, 200);\n\n        return createSuccessResponse({ response: \"USER_NOT_EXISTS\" }, 200);\n    } catch (err) {\n        console.log(\"Error in verifyUserOtp handler\", err, err.message);\n        const { message, code } = parseError(err.message);\n        return createErrorResponse({ error: message }, code || 500);\n    }\n};\n\nexport const changePassword = async (event) => {\n    try {\n        const data = parseEventBody(event.body);\n\n        const user = await _changePassword(data);\n\n        if (user) return createSuccessResponse({ response: user }, 200);\n\n        return createSuccessResponse({ response: \"USER_NOT_EXISTS\" }, 200);\n    } catch (err) {\n        console.log(\"Error in verifyUserOtp handler\", err, err.message);\n        const { message, code } = parseError(err.message);\n        return createErrorResponse({ error: message }, code || 500);\n    }\n};\n"],"names":["createRecord","getRecordByParams","runRawQuery","updateRecord","tableNames","hashString","generateJWT","addHoursToDate","descryptHashString","generateError","getOTP","getRandomNumber","expirationTime","userStatus","userRole","sendActivationCode","generateDummyProfileImg","sendOTPToUser","randomNumber","_registerUser","userData","OTP","email","mobile","contact_no_primary","role_id","password","added_by","params","dbUser","SEC_USERS","length","toLowerCase","newUser","profile_picture","user","activationCodeData","activation_code","activation_code_generated_on","Date","suid","_insertActivationCode","SEC_PATIENT_PLANS","_authenticateUser","remember_me","login_with_email","selectParams","is_active","ACTIVE","can_login","checkPwd","free_trial_expiration","currentDate","setDate","getDate","_updateProfile","_insertAccessToken","_sendOtpCode","message","_verifyEmail","data","DOCTOR","is_approved","IN_ACTIVE","codeParams","user_id","isValidActivationCode","SEC_USER_CODES","codeGeneratedDate","setMinutes","getMinutes","minutes","toString","records","whereClause","_objectSpread","_verifyOtp","otp_code","otp_code_generated_on","is_expired","_resendCode","existingCodeData","no_of_email_tries","_updateActivationCode","no_of_mobile_tries","_updateOtpCode","_forgotPassword","_changePassword","new_password","userToken","last_login","access_token","access_token_generated_on","access_token_expires_on","remember","hours","normal","updatedRecords","isRegenerate","sub","updatRecords","console","log","updateWhereClause","code_id","otpCode","containers","thumbnail","width","height","imgFormat","SMSmessages","activation_code_message","aws","s3","Bucket","Domain","settings","root_path","feedback_path","image_path","file_path","app","jwtSecret","process","env","JWT_SECRET","envMapping","development","production","test","totalFilesSize","result","SUCCESS","EMAIL_EXISTS","MOBILE_EXISTS","USER_NOT_EXISTS","USER_EXISTS","USER_PASSWORD_INCORRECT","REGISTRATION_NOT_CONFIRMED","ACTIVATION_CODE_EXPIRED","ACTIVATION_CODE_MISMATCH","ALREADY_ACTIVE_MEMBER","VALUE_NULL","DOCUMENT_N0T_EXISTS","FIREBASE_NOTIFICATION_ERROR","ZERO_RESULTS","OVER_QUERY_LIMIT","REQUEST_DENIED","INVALID_REQUEST","UNKNOWN_ERROR","OK","BAD","DENIED","FORBIDDEN","SERVER_ERROR","notificationType","BROADCAST","UNICAST","SUPER_ADMIN","ADMIN","HCF","PATIENT","DELETED","TRUNK","isPublished","PUBLISHED","UNPUBLISHED","isCompleted","COMPLETED","NOT_COMPLETED","mailType","welcome","resetPassword","error","notificationStatus","unRead","read","isSent","sent","notSent","registration_type","EMAIL","SSO","registration_from","WEB","APP","seconds","unit","jwt","https","fs","crypto","cryptoAlgorithm","cryptoPassword","Buffer","from","CRYPTO_PASSWORD","IV_LENGTH","randomStringLength","chars","OTPlength","OTPchars","i","Math","round","random","iv","randomBytes","cipher","createCipheriv","encrypted","update","finalBuffer","concat","final","textParts","split","shift","encryptedText","join","decipher","createDecipheriv","decrypted","sign","expiresIn","decodeJWT","token","decoded","verify","err","date","setHours","getHours","addMinutesToDate","getFilenameAndExtension","pathfilename","filenameextension","replace","filename","substring","lastIndexOf","ext","pop","groupBy","arr","key","initialValue","reduce","acc","cval","myAttribute","createSuccessResponse","body","statusCode","bodyString","JSON","stringify","headers","createErrorResponse","streamToString","stream","Promise","resolve","reject","chunks","on","chunk","push","parseCookies","request","list","cookieHeader","queryStringParameters","cookie","cookies","Cookie","authorization","Authorization","forEach","name","rest","trimedName","trim","value","decodeURIComponent","formatDate","newDate","getMonth","getFullYear","createDirectory","path","existsSync","mkdirSync","downloadFile","url","filePath","get","response","code","Error","statusMessage","location","fileWriter","createWriteStream","pipe","getDomainWithoutSubdomain","domain","domainCharacters","reverse","domainReversed","dotCount","splice","getFilesizeInBytes","stats","statSync","size","getPeriodStartEnd","periodType","startDate","endDate","setMonth","setFullYear","stringifyError","parseEventBody","parseBody","parse","errObj","parseError","initConnection","queryDatabase","query","conn","rows","end","table","getResults","column","columns","Object","keys","values","map","record","insertResult","insertId","selectQuery","selectResult","whereColumns","joinParams","ele","getAllRecords","order","orderBy","deleteRecord","table1","table2","table3","column1","column2","column3","column4","completeDoctorsDetails","completeDoctorsDetailsId","id","appointmentQuery","completeappointmentQuery","DocDashboardAppQuery","doc_id","DocDashoardAppstatusQuery","app_status","app_id","DocNotificationQuery","docAppointmentdetailsQuerybyId","docAppointmentQuerybystatusId","getDocAppStatusRecord","getDocListingRecord","getDocAppRecord","doctordetailsQueryId","column5","getDocDetailRecord","DocAppointmentHistory","DoctransactionQuery","dashboarddocdetailsQuery","dashboarddocdetailsQueryId","dashboardhcfdetailsQuery","dashboardhcfdetailsQueryId","hcf_id","patientActivityQuery","patientNotificationQuery","patientappQuerybystatusid","appointmentHistoryQuery","patienttransactionQuery","patientPlanQuery","pat_id","mysql","pool","config","host","DB_HOST","DB_USER","DB_PASSWORD","database","DB_DATABASE","waitForConnections","connectionLimit","CONNECTION_LIMIT","queueLimit","QUEUE_LIMIT","SEC_COUNTRIES","SEC_STATES","SEC_CITIES","SEC_ROLES","SEC_DEPARTMENTS","SEC_DOCTORS_DETAILS","VW_SEC_COMPLETE_DOCTOR_DETAILS","SEC_APPOINTMENTS","SEC_TRANSACTIONS","SEC_DOCTOR_LISTING","SEC_HCF_DETAILS","SESClient","SendEmailCommand","SNSClient","PublishCommand","region","REGION","sesClient","snsClient","sendEmailToUser","sendTo","subject","input","Source","FROM_EMAIL_ADDRESS","Destination","ToAddresses","Message","Subject","Charset","Data","Body","Html","ReplyToAddresses","command","send","phoneNumber","messageAttributes","DataType","StringValue","publishParams","MessageAttributes","PhoneNumber","MessageId","ProfileImage","constructor","initials","options","textColor","backgroundColor","fontFamily","fontSize","fontWeight","png","createCanvas","require","canvas","context","getContext","centerX","centerY","radius","beginPath","arc","PI","fillStyle","fill","font","textAlign","fillText","toDataURL","getRandomColor","color","possible","charAt","floor","text","slice","toUpperCase","img","src","action","getUserModel","newData","token_id","undefined","tokens","SSO_type","registered_via","is_login","first_name","last_name","middle_name","gender","DOB","country_id","state_id","city_id","street_address1","street_address2","zip_code","registerUser","event","verifyUserEmail","updateProfile","authenticateUser","verifyUserOtp","resendCode","forgotPassword","changePassword"],"sourceRoot":""}